<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZARCHIVE">
 <CLAS CLSNAME="ZCL_B_ARCHIVE_CENTRAL" VERSION="1" LANGU="E" DESCRIPT="Business Object Class for Central Archive" UUID="02023211AE4F1ED28DAC9CC07F490C43" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_B_ARCHIVE_CENTRAL" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="PERSISTENT_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Persistent Class for Central Archive" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_P_ARCHIVE_CENTRAL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CONSTRUCTOR" SCONAME="I_PERSISTENT_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Persistent Class for Central Archive" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_P_ARCHIVE_CENTRAL"/>
   <source>method CONSTRUCTOR.
  me-&gt;persistent_object = I_PERSISTENT_OBJECT.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" VERSION="1" LANGU="E" DESCRIPT="Create new document in the central archive" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Unique Document ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="I_DOC_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Document Filename" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCFILENAME"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="I_DOC_SIZE" VERSION="1" LANGU="E" DESCRIPT="Document Size" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCSIZE"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="I_DOC_CONTENT" VERSION="1" LANGU="E" DESCRIPT="Document Content" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCCONTENT"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="I_DOC_COMPRESSION" VERSION="1" LANGU="E" DESCRIPT="Compression flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="&apos;X&apos;"/>
   <exception CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services: Object Exists" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter with Invalid Range" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="CREATE_DOCUMENT" SCONAME="CX_SY_BUFFER_OVERFLOW" VERSION="1" LANGU="E" DESCRIPT="System Exception: Buffer too Short" MTDTYPE="0" EDITORDER="3 "/>
   <source>METHOD create_document.

  DATA:  l_agent  TYPE REF TO zca_p_archive_central,
         l_pers_obj TYPE REF TO zcl_p_archive_central.

  l_agent = zca_p_archive_central=&gt;agent.
  TRY. &quot;NEEDED TO LOAD EXISTING VALUES
      l_pers_obj = l_agent-&gt;get_persistent( i_doc_id = i_doc_id
                                       i_doc_user = sy-uname ).
    CATCH cx_os_object_not_found.

  ENDTRY.

  l_pers_obj = l_agent-&gt;create_persistent( i_doc_id = i_doc_id
                                               i_doc_user = sy-uname ).
  &quot;Perform zip compression
  DATA izip TYPE REF TO cl_abap_gzip.
  DATA lv_gzip_out TYPE zarchive_doccontent.
  DATA lv_gzip_len TYPE zarchive_docsize.

  IF i_doc_compression EQ abap_true.
    CREATE OBJECT izip.
    CALL METHOD cl_abap_gzip=&gt;compress_binary
      EXPORTING
        raw_in         = i_doc_content
        raw_in_len     = i_doc_size
        compress_level = 6
      IMPORTING
        gzip_out       = lv_gzip_out
        gzip_out_len   = lv_gzip_len.

    l_pers_obj-&gt;set_doc_content( i_doc_content = lv_gzip_out ).
    l_pers_obj-&gt;set_doc_size( i_doc_size = lv_gzip_len ).
  ELSE.
    l_pers_obj-&gt;set_doc_content( i_doc_content = i_doc_content ).
    l_pers_obj-&gt;set_doc_size( i_doc_size = i_doc_size ).
  ENDIF.

  l_pers_obj-&gt;set_doc_filename( i_doc_filename = i_doc_filename ).
  l_pers_obj-&gt;set_doc_creation_date( i_doc_creation_date = sy-datum ).
  l_pers_obj-&gt;set_doc_creation_time( i_doc_creation_time = sy-uzeit ).


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="DELETE_DOCUMENT" VERSION="1" LANGU="E" DESCRIPT="Delete a document from the central archive" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="DELETE_DOCUMENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Unique Document ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <exception CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="DELETE_DOCUMENT" SCONAME="CX_OS_OBJECT_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services: Object Does not Exist" MTDTYPE="0" EDITORDER="1 "/>
   <source>method DELETE_DOCUMENT.

  DATA:  l_agent  TYPE REF TO zca_p_archive_central,
         l_pers_obj TYPE REF TO zcl_p_archive_central.

  l_agent = zca_p_archive_central=&gt;agent.
  l_agent-&gt;delete_persistent( i_doc_id = i_doc_id
                              i_doc_user = sy-uname ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" VERSION="1" LANGU="E" DESCRIPT="Read a document from the central archive" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Unique Document ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="I_DOC_DECOMPRESSION" VERSION="1" LANGU="E" DESCRIPT="Decompression flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="&apos;X&apos;"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="E_DOC_CONTENT" VERSION="1" LANGU="E" DESCRIPT="Document Content" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCCONTENT"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="E_DOC_SIZE" VERSION="1" LANGU="E" DESCRIPT="Document Size" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCSIZE"/>
   <parameter CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="E_DOC_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Document Filename" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCFILENAME"/>
   <exception CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services: Object not Found" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="CX_PARAMETER_INVALID_RANGE" VERSION="1" LANGU="E" DESCRIPT="Parameter with Invalid Range" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_B_ARCHIVE_CENTRAL" CMPNAME="READ_DOCUMENT" SCONAME="CX_SY_BUFFER_OVERFLOW" VERSION="1" LANGU="E" DESCRIPT="System Exception: Buffer too Short" MTDTYPE="0" EDITORDER="3 "/>
   <source>METHOD read_document.

  DATA:  l_agent  TYPE REF TO zca_p_archive_central,
         l_pers_obj TYPE REF TO zcl_p_archive_central.

  DATA   lo_archive       TYPE REF TO zcl_b_archive_central.
  DATA   lv_content TYPE zarchive_doccontent.
  DATA   lv_size TYPE zarchive_docsize.

  l_agent = zca_p_archive_central=&gt;agent.
  l_pers_obj = l_agent-&gt;get_persistent( i_doc_id = i_doc_id
                                        i_doc_user = sy-uname ).

  CREATE OBJECT lo_archive
    EXPORTING
      i_persistent_object = l_pers_obj.

  lv_content = lo_archive-&gt;persistent_object-&gt;get_doc_content( ).
  lv_size = lo_archive-&gt;persistent_object-&gt;get_doc_size( ).

  &quot;Perform zip decompression
  DATA izip TYPE REF TO cl_abap_gzip.
  DATA lv_gzip_out TYPE zarchive_doccontent.
  DATA lv_gzip_len TYPE zarchive_docsize.

  IF i_doc_decompression EQ abap_true.

    CREATE OBJECT izip.

    DATA exp_ir TYPE REF TO cx_parameter_invalid_range.
    DATA exp_of TYPE REF TO cx_sy_buffer_overflow.

    DATA lv_zipout TYPE xstring.

    CALL METHOD cl_abap_gzip=&gt;decompress_binary
      EXPORTING
        gzip_in     = lv_content
        gzip_in_len = lv_size
      IMPORTING
        raw_out     = e_doc_content
        raw_out_len = e_doc_size.

  ELSE.
    e_doc_content = lv_content.
    e_doc_size = lv_size.
  ENDIF.

  e_doc_filename = lo_archive-&gt;persistent_object-&gt;get_doc_filename( ).

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCA_P_ARCHIVE_CENTRAL" VERSION="1" LANGU="E" DESCRIPT="Agent Persistent Class for Central Archive" UUID="02023211AE4F1ED28DAC24E7C722ABFB" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCB_P_ARCHIVE_CENTRAL">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCA_P_ARCHIVE_CENTRAL" CMPNAME="AGENT" VERSION="1" LANGU="E" DESCRIPT="Class Agent - Singleton" EXPOSURE="2" STATE="1" EDITORDER="0 " ATTDECLTYP="1" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCA_P_ARCHIVE_CENTRAL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCA_P_ARCHIVE_CENTRAL" REFCLSNAME="ZCB_P_ARCHIVE_CENTRAL" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCA_P_ARCHIVE_CENTRAL" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Class Constructor" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.
***BUILD 090501
************************************************************************
* Purpose        : Initialize the &apos;class&apos;.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Singleton is created.
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-20   : (OS) Initial Version
* - 2000-03-06   : (BGR) 2.0 modified REGISTER_CLASS_AGENT
************************************************************************
* GENERATED: Do not modify
************************************************************************

  create object AGENT.

  call method AGENT-&gt;REGISTER_CLASS_AGENT
    exporting
      I_CLASS_NAME          = &apos;ZCL_P_ARCHIVE_CENTRAL&apos;
      I_CLASS_AGENT_NAME    = &apos;ZCA_P_ARCHIVE_CENTRAL&apos;
      I_CLASS_GUID          = &apos;02023211AE4F1ED28DAC24D10F274BFB&apos;
      I_CLASS_AGENT_GUID    = &apos;02023211AE4F1ED28DAC24E7C722ABFB&apos;
      I_AGENT               = AGENT
      I_STORAGE_LOCATION    = &apos;ZARCHIVE_CENTRAL&apos;
      I_CLASS_AGENT_VERSION = &apos;2.0&apos;.

           &quot;CLASS_CONSTRUCTOR
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCB_P_ARCHIVE_CENTRAL" VERSION="1" LANGU="E" DESCRIPT="Base agent Persistent Class for Central Archive" UUID="02023211AE4F1ED28DAC24E7C7228BFB" CATEGORY="11" EXPOSURE="2" STATE="1" RELEASE="0" CLSABSTRCT="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CL_OS_CA_COMMON">
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_OID" VERSION="1" LANGU="E" DESCRIPT="Type of Generic Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_TYPE" VERSION="1" LANGU="E" DESCRIPT="Type of Type Identifier" EXPOSURE="1" STATE="1" EDITORDER="0 " TYPTYPE="1" TYPE="OS_GUID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Type of Managed Object" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZCL_P_ARCHIVE_CENTRAL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="26 " TYPESRC_LENG="134 " TYPESRC="begin of TYP_BUSINESS_KEY ,
      DOC_ID type ZARCHIVE_DOCID ,
      DOC_USER type ZARCHIVE_DOCUSER ,
    end of TYP_BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="4" TYPE="TYP_BUSINESS_KEY" SRCROW1="14 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="49 " TYPESRC_LENG="97 " TYPESRC="TYP_BUSINESS_KEY_TAB type standard table of
      TYP_BUSINESS_KEY with non-unique default key
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Line-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="21 " TYPESRC_LENG="372 " TYPESRC="begin of TYP_DB_DATA ,
      DOC_ID type ZARCHIVE_DOCID ,
      DOC_USER type ZARCHIVE_DOCUSER ,
      DOC_FILENAME type ZARCHIVE_DOCFILENAME ,
      DOC_CONTENT type ZARCHIVE_DOCCONTENT ,
      DOC_SIZE type ZARCHIVE_DOCSIZE ,
      DOC_CREATION_DATE type ZARCHIVE_DOCCREATIONDATE ,
      DOC_CREATION_TIME type ZARCHIVE_DOCCREATIONTIME ,
    end of TYP_DB_DATA
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Table-Type Persistent Object Data" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_DB_DATA" SRCROW1="27 " SRCCOLUMN1="4 " SRCROW2="28 " SRCCOLUMN2="44 " TYPESRC_LENG="87 " TYPESRC="TYP_DB_DATA_TAB type standard table of
      TYP_DB_DATA with non-unique default key
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_OID_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Identifier" EXPOSURE="1" STATE="1" EDITORDER="5 " TYPTYPE="4" TYPE="TYP_OID" SRCROW1="30 " SRCCOLUMN1="4 " SRCROW2="31 " SRCCOLUMN2="40 " TYPESRC_LENG="79 " TYPESRC="TYP_OID_TAB type standard table of
      TYP_OID with non-unique default key
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Object Reference" EXPOSURE="1" STATE="1" EDITORDER="6 " TYPTYPE="4" TYPE="TYP_OBJECT_REF" SRCROW1="33 " SRCCOLUMN1="4 " SRCROW2="34 " SRCCOLUMN2="47 " TYPESRC_LENG="93 " TYPESRC="TYP_OBJECT_REF_TAB type standard table of
      TYP_OBJECT_REF with non-unique default key
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Line Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="36 " SRCCOLUMN1="4 " SRCROW2="40 " SRCCOLUMN2="33 " TYPESRC_LENG="195 " TYPESRC="begin of TYP_SPECIAL_OBJECT_INFO ,
      OBJECT_ID type TYP_INTERNAL_OID ,
      ID_STATUS type TYP_ID_STATUS ,
      BUSINESS_KEY type TYP_BUSINESS_KEY ,
    end of TYP_SPECIAL_OBJECT_INFO
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_SPECIAL_OBJECT_INFO_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="8 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="42 " SRCCOLUMN1="4 " SRCROW2="44 " SRCCOLUMN2="14 " TYPESRC_LENG="114 " TYPESRC="TYP_SPECIAL_OBJECT_INFO_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      OBJECT_ID
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="9 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="46 " SRCCOLUMN1="4 " SRCROW2="48 " SRCCOLUMN2="17 " TYPESRC_LENG="110 " TYPESRC="TYP_SPECIAL_BKEY_TAB type sorted table of
      TYP_SPECIAL_OBJECT_INFO with unique key
      BUSINESS_KEY
"/>
  <types CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="TYP_DB_DELETE_TAB" VERSION="1" LANGU="E" DESCRIPT="Table Type Identifiers to Delete" EXPOSURE="1" STATE="1" EDITORDER="10 " TYPTYPE="4" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="50 " SRCCOLUMN1="4 " SRCROW2="51 " SRCCOLUMN2="56 " TYPESRC_LENG="101 " TYPESRC="TYP_DB_DELETE_TAB type standard table of
      TYP_SPECIAL_OBJECT_INFO with non-unique default key
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CURRENT_SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Current Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="SPECIAL_BKEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Class-Specific: Search Table Business Keys" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_BKEY_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="SPECIAL_OBJECT_INFO" VERSION="1" LANGU="E" DESCRIPT="Class-Specific Object Data" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TYP_SPECIAL_OBJECT_INFO_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="DELETE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY" EXPOSURE="0"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="LOAD_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="MAP_INVALIDATE" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="OS_PM_DELETE_PERSISTENT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="PM_LOAD" EXPOSURE="1"/>
   <redefinition CLSNAME="ZCB_P_ARCHIVE_CENTRAL" REFCLSNAME="CL_OS_CA_COMMON" VERSION="1" MTDNAME="SAVE_SPECIAL_OBJECT_INFO" EXPOSURE="1"/>
  </inheritance>
  <interfaceMethod CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Get a persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : The object exists with the given business key,
*                  either in memory or on database.
*
* Postcondition  : The object exists in memory, RESULT is the reference
*
* OO Exceptions  : propagates GET_PERSISTENT
*
* Implementation : call GET_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method GET_PERSISTENT
       exporting I_DOC_ID = BUSINESS_KEY-DOC_ID
                 I_DOC_USER = BUSINESS_KEY-DOC_USER
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB">
   <source>method IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB.
***BUILD 093901
      &quot;importing I_KEY_TAB type INDEX TABLE
      &quot;returning value(RESULT) type OSREFTAB
      &quot;raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get persistent objects by Business Key table
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : For each entry in the KEY table, there is a corres-
*                  ponding entry in the RESULT table. If the object was
*                  found in the cache or the database, then a reference
*                  to this object can be found in the RESULT table,
*                  if not, the reference is initial. The persistent
*                  objects are active.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                     3.a Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 2004-01-07   : (SB)  Initial version
************************************************************************

  types: begin of TYP_BUSINESS_KEY_INDEX,
           BUSINESS_KEY     type TYP_BUSINESS_KEY,
           INDEX            type SY-TABIX,
         end of TYP_BUSINESS_KEY_INDEX,
         TYP_BUSINESS_KEY_INDEX_TAB type sorted table
           of TYP_BUSINESS_KEY_INDEX with non-unique key BUSINESS_KEY.

  data: FLAG_NOT_LOADED        type OS_BOOLEAN,
        BKEY_STRING            type STRING,
        TEMP_OBJECT_REF        type TYP_OBJECT_REF,
        BUSINESS_KEY           type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB       type TYP_BUSINESS_KEY_TAB,
        OBJECT_DATA_TAB        type TYP_DB_DATA_TAB,
        BUSINESS_KEY_INDEX     type TYP_BUSINESS_KEY_INDEX,
        BUSINESS_KEY_INDEX_TAB type TYP_BUSINESS_KEY_INDEX_TAB,
        NEXT_INDEX             type SY-TABIX.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

  field-symbols: &lt;FS_OBJECT_DATA&gt;  type TYP_DB_DATA,
                 &lt;FS_BUSINESS_KEY&gt; type TYP_BUSINESS_KEY,
                 &lt;FS_BUSINESS_KEY_INDEX&gt; type TYP_BUSINESS_KEY_INDEX.

* * 1. Look for objects in SPECIAL_OBJECT_INFO. If found, check if they
* * are still valid

  loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;#EC GEN_OK

    clear CURRENT_OBJECT_IREF.

    read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.

    if ( SY-SUBRC = 0 ).

      read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
           with table key
           OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
      call method OS_LOAD_AND_VALIDATE_CURRENT
           exporting I_INDEX = SY-TABIX.

    endif.

    if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Object found: Check PM_STATUS

      case CURRENT_OBJECT_INFO-PM_STATUS.

*     * 2a. If Status is TRANSIENT or DELETED, error!
      when OSCON_OSTATUS_DELETED.

*!!!!!!! Error: Object activation failed - Object marked for deletion
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

      when OSCON_OSTATUS_TRANSIENT.

*!!!!!!! Error: Object activation failed - Object is transient
        TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
        BKEY_STRING  = MAP_SERIALIZE_BKEY( &lt;FS_BUSINESS_KEY&gt; ).
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
        class CX_OS_OBJECT_NOT_FOUND definition load.
        raise exception type CX_OS_OBJECT_NOT_FOUND
          exporting
            OBJECT = TEMP_CURRENT_OBJECT_IREF
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.

*     * 2b. If Status is NOT_LOADED, continue with 3.
      when OSCON_OSTATUS_NOT_LOADED.

        FLAG_NOT_LOADED = OSCON_TRUE.

*     * 2c. If Status is NEW, LOADED or CHANGED, success!
      when others.

        FLAG_NOT_LOADED = OSCON_FALSE.

      endcase.

    else.&quot; ( CURRENT_OBJECT_IREF is initial )

      FLAG_NOT_LOADED = OSCON_TRUE.

    endif.

    if ( FLAG_NOT_LOADED = OSCON_TRUE ).

      append &lt;FS_BUSINESS_KEY&gt; to BUSINESS_KEY_TAB.

    endif.

    TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.
    append TEMP_OBJECT_REF to RESULT.

    call method OS_CLEAR_CURRENT.

  endloop.

* * 3. Load object data from database and set objects

  if ( BUSINESS_KEY_TAB is not initial ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method MAP_LOAD_FROM_DATABASE_KEY
             exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
             receiving result = OBJECT_DATA_TAB.
      catch CX_OS_DB_SELECT.
        clear OBJECT_DATA_TAB.
    endtry.

    loop at I_KEY_TAB assigning &lt;FS_BUSINESS_KEY&gt;. &quot;EC GEN_OK
      BUSINESS_KEY_INDEX-BUSINESS_KEY = &lt;FS_BUSINESS_KEY&gt;.
      BUSINESS_KEY_INDEX-INDEX = SY-TABIX.
      insert BUSINESS_KEY_INDEX into table BUSINESS_KEY_INDEX_TAB.
    endloop.

    try.

        loop at OBJECT_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

          call method MAP_EXTRACT_IDENTIFIER
               exporting I_DB_DATA  = &lt;FS_OBJECT_DATA&gt;
               importing E_BUSINESS_KEY = BUSINESS_KEY.

          clear CURRENT_OBJECT_IREF.

          call method PM_CHECK_AND_SET_ATTRIBUTES
               exporting I_OBJECT_DATA  = &lt;FS_OBJECT_DATA&gt;
                         I_ID_PROVIDED  = ID_STATUS_NONE.

          TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF.

          read table BUSINESS_KEY_INDEX_TAB
               with key BUSINESS_KEY = BUSINESS_KEY
               assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          while ( ( SY-SUBRC = 0 ) and
                  ( &lt;FS_BUSINESS_KEY_INDEX&gt;-BUSINESS_KEY =
                    BUSINESS_KEY ) ).

            NEXT_INDEX = SY-TABIX + 1.

            modify RESULT from TEMP_OBJECT_REF
                          index &lt;FS_BUSINESS_KEY_INDEX&gt;-INDEX.

            read table BUSINESS_KEY_INDEX_TAB
                 index NEXT_INDEX
                 assigning &lt;FS_BUSINESS_KEY_INDEX&gt;.

          endwhile.

*         * 3.a. Completion in super class
          call method OS_PM_LOADED_PERSISTENT.

          clear CURRENT_SPECIAL_OBJECT_INFO.

        endloop.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  endif.

* * 4. clean up

  clear CURRENT_SPECIAL_OBJECT_INFO.


           &quot;IF_OS_CA_PERSISTENCY~GET_PERSISTENT_BY_KEY_TAB
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_CA_SERVICE~SAVE">
   <source>method IF_OS_CA_SERVICE~SAVE.
***BUILD 090501
************************************************************************
* Purpose        : Prepare data for database (buffer) transfer
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : data is prepared for saving
*                  if UPDATE_MODE is direct, it is saved to DB
*                  if UPDATE_MODE is LOCAL or UPDATE_TASK,
*                    the corresponding function call is registered
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*                  propagates MAP_GET_ATTRIBUTES.
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
* - 2003-03-20   : (SB) post only if there dirty instances
************************************************************************

  data: NEW_OBJECT_REF_TAB       type TYP_OBJECT_REF_TAB,
        CHANGED_OBJECT_REF_TAB   type TYP_OBJECT_REF_TAB,
        INSERT_DATA_TAB          type TYP_DB_DATA_TAB ,
        INSERT_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        UPDATE_DATA_TAB          type TYP_DB_DATA_TAB ,
        UPDATE_KEY_TAB           type TYP_BUSINESS_KEY_TAB,
        DELETE_TAB               type TYP_DB_DELETE_TAB ,
        UPDATE_MODE              type OS_DMODE,
        OBJECT_REF               type TYP_OBJECT_REF,
        OBJECT_INDEX             type TYP_INDEX,
        XCONTAINER               type XSTRING.

  field-symbols:
          &lt;FS_OBJECT_INFO_ITEM&gt;         type TYP_OBJECT_INFO,
          &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; type TYP_SPECIAL_OBJECT_INFO.

* * 1. get strong reference, BKey for all objects with status
* *    NEW, CHANGED or DELETED

  loop at OBJECT_INFO assigning &lt;FS_OBJECT_INFO_ITEM&gt; &quot;#EC CI_SORTSEQ
       where ( PM_STATUS = OSCON_OSTATUS_NEW or       &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_CHANGED or   &quot;#EC CI_SORTSEQ
               PM_STATUS = OSCON_OSTATUS_DELETED ) and &quot;#EC CI_SORTSEQ
               OM_IGNORE = OSCON_FALSE.               &quot;#EC CI_SORTSEQ

    OBJECT_INDEX = sy-tabix.

    case &lt;FS_OBJECT_INFO_ITEM&gt;-PM_STATUS.

      when OSCON_OSTATUS_NEW.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to NEW_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to INSERT_KEY_TAB.

      when OSCON_OSTATUS_CHANGED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        OBJECT_REF ?= &lt;FS_OBJECT_INFO_ITEM&gt;-OBJECT_IREF.
        append OBJECT_REF
            to CHANGED_OBJECT_REF_TAB.
        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;-BUSINESS_KEY
            to UPDATE_KEY_TAB.

      when OSCON_OSTATUS_DELETED.

        read table SPECIAL_OBJECT_INFO
             assigning &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt;
             index OBJECT_INDEX.

        append &lt;FS_SPECIAL_OBJECT_INFO_ITEM&gt; to DELETE_TAB.

    endcase.&quot; Status

  endloop. &quot;at OBJECT_INFO


* * 2. get attributes for new and changed objects

* * New Objects
  if ( not NEW_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = NEW_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = INSERT_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = INSERT_KEY_TAB
         changing  C_DB_DATA_TAB      = INSERT_DATA_TAB.

  endif. &quot;( not NEW_OBJECT_REF_TAB is initial ).

* * Changed Objects
  if ( not CHANGED_OBJECT_REF_TAB is initial ).

    call method MAP_GET_ATTRIBUTES
         exporting I_OBJECT_REF_TAB  = CHANGED_OBJECT_REF_TAB
         importing E_OBJECT_DATA_TAB = UPDATE_DATA_TAB.

    call method MAP_MERGE_IDENTIFIER
         exporting I_BUSINESS_KEY_TAB = UPDATE_KEY_TAB
         changing  C_DB_DATA_TAB      = UPDATE_DATA_TAB.

  endif. &quot;( not CHANGED_OBJECT_REF_TAB is initial ).

* * 3. perform or subscribe DB operations

  if ( ( INSERT_DATA_TAB is not initial ) or
       ( UPDATE_DATA_TAB is not initial ) or
       ( DELETE_TAB is not initial ) ).

    UPDATE_MODE = PERSISTENCY_MANAGER-&gt;GET_UPDATE_MODE(  ).
    if ( UPDATE_MODE = DMODE_DIRECT ).

*     * Direct DB operations
      call method MAP_SAVE_TO_DATABASE
           exporting I_INSERTS = INSERT_DATA_TAB
                     I_UPDATES = UPDATE_DATA_TAB
                     I_DELETES = DELETE_TAB.

    else.&quot; ( Update task )

*     * export data to be saved to DB to data buffer
      export
        INSERT_DATA_TAB = INSERT_DATA_TAB
        UPDATE_DATA_TAB = UPDATE_DATA_TAB
        DELETE_TAB      = DELETE_TAB
          to data buffer XCONTAINER.

*     * call update function in update task. this function
*     * calls the method if_os_ca_service~save_in_update_task
*     * of this class agent.
      call function &apos;OS_UPDATE_CLASS&apos; in update task
        exporting
          CLASSNAME = CLASS_INFO-CLASS_AGENT_NAME
          XCONTAINER = XCONTAINER.

    endif.&quot; (Update mode?)

  endif.&quot; (something to post?)

           &quot;IF_OS_CA_SERVICE~SAVE
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK">
   <source>method IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK.
***BUILD 090501
     &quot; importing XCONTAINER type XSTRING optional
************************************************************************
* Purpose        : save object data to DB when running in update task
*                  mode.
*
* Version        : 2.0
*
* Precondition   : no object service environment is set, no objects
*                  exist in update task
*
* Postcondition  : data has been saved to DB
*
* OO Exceptions  : propagates MAP_SAVE_TO_DATABASE
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
* - 2001-01-06   : (SB) Update with EXPORT TO DATA BUFFER
************************************************************************

  data: INSERT_DATA_TAB       type TYP_DB_DATA_TAB ,
        UPDATE_DATA_TAB       type TYP_DB_DATA_TAB ,
        DELETE_TAB            type TYP_DB_DELETE_TAB .

* * import data to be saved to DB from data buffer
  import
    INSERT_DATA_TAB = INSERT_DATA_TAB
    UPDATE_DATA_TAB = UPDATE_DATA_TAB
    DELETE_TAB      = DELETE_TAB
      from data buffer XCONTAINER.

* * store them to DB
  call method MAP_SAVE_TO_DATABASE
       exporting I_INSERTS = INSERT_DATA_TAB
                 I_UPDATES = UPDATE_DATA_TAB
                 I_DELETES = DELETE_TAB.

           &quot;IF_OS_CA_SERVICE~SAVE_IN_UPDATE_TASK
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : propagates CREATE_PERSISTENT
*
* Implementation : call CREATE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_PERSISTENT
       exporting I_DOC_ID = BUSINESS_KEY-DOC_ID
                 I_DOC_USER = BUSINESS_KEY-DOC_USER
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_PERSISTENT_BY_KEY
endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY">
   <source>method IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY.
***BUILD 093901
*      importing I_KEY type any
*      returning result type ref to object
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key
*
* Postcondition  : The object exists in memory
*
* OO Exceptions  : propagates CREATE_TRANSIENT
*
* Implementation : call CREATE_TRANSIENT
*
************************************************************************
* Changelog:
* - 2001-01-01   : (SB)  Initial Version 2.0
************************************************************************

  data: BUSINESS_KEY             type TYP_BUSINESS_KEY.

  BUSINESS_KEY = I_KEY.

*&lt; Generated from mapping:
  call method CREATE_TRANSIENT
       exporting I_DOC_ID = BUSINESS_KEY-DOC_ID
                 I_DOC_USER = BUSINESS_KEY-DOC_USER
       receiving RESULT = RESULT.
*&gt;

           &quot;IF_OS_FACTORY~CREATE_TRANSIENT_BY_KEY
endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Generate New Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_PERSISTENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_PERSISTENT" SCONAME="I_DOC_USER" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCUSER"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_P_ARCHIVE_CENTRAL"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_PERSISTENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_DOC_ID TYPE ZARCHIVE_DOCID
*      IMPORTING I_DOC_USER TYPE ZARCHIVE_DOCUSER
*      RETURNING RESULT TYPE REF TO ZCL_P_ARCHIVE_CENTRAL
************************************************************************
* Purpose        : Create a new persistent object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory and will result in a
*                  new entry on database when the top transaction is
*                  closed.
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_PERSISTENT,
*                            TRANSIENT_CREATING_PERSISTENT)
*                  propagates OS_PM_CREATED_PERSISTENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as NEW and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-DOC_ID = I_DOC_ID.
  BUSINESS_KEY-DOC_USER = I_DOC_USER.
*&gt;

* * 1. Check if there is already an object with this key
  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;DOC_ID = I_DOC_ID.
          THE_OBJECT-&gt;DOC_USER = I_DOC_USER.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_FALSE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_PERSISTENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_PERSISTENT.

    endcase.

  else. &quot;( No entry found )

*   * 3. Create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. register object as &apos;NEW&apos; and initialize it.
    call method OS_PM_CREATED_PERSISTENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean-up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_PERSISTENT
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Generate Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_TRANSIENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_TRANSIENT" SCONAME="I_DOC_USER" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCUSER"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_P_ARCHIVE_CENTRAL"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="CREATE_TRANSIENT" SCONAME="CX_OS_OBJECT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method CREATE_TRANSIENT.
***BUILD 093901
*      IMPORTING I_DOC_ID TYPE ZARCHIVE_DOCID
*      IMPORTING I_DOC_USER TYPE ZARCHIVE_DOCUSER
*      RETURNING RESULT TYPE REF TO ZCL_P_ARCHIVE_CENTRAL
************************************************************************
* Purpose        : Create a new transient object identified by the
*                  given business key
*
* Version        : 2.0
*
* Precondition   : No object exists with the given business key, neither
*                  in memory nor on database.
*
* Postcondition  : The object exists in memory until it is RELEASEd
*
* OO Exceptions  : CX_OS_OBJECT_EXISTING(
*                            PERSISTENT_CREATING_TRANSIENT,
*                            TRANSIENT_CREATING_TRANSIENT)
*                  propagates OS_PM_CREATED_TRANSIENT
*
* Implementation : 1. Check if there is already an object with the
*                     same key
*                  2. If there is one, let OS_PM_HANDLE_CREATE_ON_EXIST
*                     decide if it is allowed to re-use the object
*                  3. If there is none, create a new object
*                  4. Set Attributes
*                  5. Register the object as TRANSIENT and initialize it
*                  6. Clean up
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-01-10   : (SB)  persistent attributes as optional parameters
* - 2001-10-30   : (SB)  type mapping
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2003-04-28   : (SB)  reuse of instances reimplemented
************************************************************************

  data: THE_OBJECT   type        TYP_OBJECT_REF,
        BUSINESS_KEY type        TYP_BUSINESS_KEY,
        BKEY_STRING  type        STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to object.

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-DOC_ID = I_DOC_ID.
  BUSINESS_KEY-DOC_USER = I_DOC_USER.
*&gt;

* * 1. Check if there is already an object with the same key

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif. &quot;( entry found )

  if ( not CURRENT_OBJECT_IREF is initial ).

*   * 2. Found an entry. Check if it is allowed to re-use it
    THE_OBJECT ?= CURRENT_OBJECT_IREF.

    case CURRENT_OBJECT_INFO-PM_STATUS.

    when OSCON_OSTATUS_DELETED or
        OSCON_OSTATUS_NOT_LOADED.

      try.

*&lt;  Generated from mapping:
          THE_OBJECT-&gt;DOC_ID = I_DOC_ID.
          THE_OBJECT-&gt;DOC_USER = I_DOC_USER.
*&gt;

          call method OS_PM_HANDLE_CREATE_ON_EXIST
               exporting I_TRANSIENT = OSCON_TRUE.

        cleanup.
          clear CURRENT_SPECIAL_OBJECT_INFO.
          call method OS_CLEAR_CURRENT.
      endtry.

    when OSCON_OSTATUS_TRANSIENT.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;TRANSIENT_CREATING_TRANSIENT.

    when others.

      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_EXISTING definition load.
      raise exception type CX_OS_OBJECT_EXISTING
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID =
            CX_OS_OBJECT_EXISTING=&gt;PERSISTENT_CREATING_TRANSIENT.

    endcase.

  else. &quot;( Noch kein Eintrag )

*   * 3. If there is none, create a new object
    THE_OBJECT = PM_CREATE_REPRESENTANT(
                   I_BUSINESS_KEY = BUSINESS_KEY ).

*   * 4. Set attributes
*&lt;   Generated from mapping:
*&gt;

*   * 5. Register the object as TRANSIENT and initialize it
    call method OS_PM_CREATED_TRANSIENT.

  endif. &quot;( Eintrag vorhanden )

* * 6. Clean up
  clear CURRENT_SPECIAL_OBJECT_INFO.
  RESULT = THE_OBJECT.

           &quot;CREATE_TRANSIENT
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="DELETE_PERSISTENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="DELETE_PERSISTENT" SCONAME="I_DOC_USER" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCUSER"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="DELETE_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method DELETE_PERSISTENT.
***BUILD 093901
*      IMPORTING I_DOC_ID TYPE ZARCHIVE_DOCID.
*      IMPORTING I_DOC_USER TYPE ZARCHIVE_DOCUSER.
*      raising   CX_OS_OBJECT_NOT_EXISTING
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient)
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_EXISTING(TRANSIENT_BY_BKEY,
*                  CREATED_AND_DELETED_BY_BKEY,BY_BKEY)
*                  ( propagates PM_LOAD_AND_SET_ATTRIBUTES )
*                  propagates PM_DELETE_PERSISTENT
*
* Implementation : 1. Check if there is already an object with that
*                     business key
*                  2. If not: create representative object and check
*                     if there is an entry on DB (Need to be sure that
*                     no other object exists with the OID that belongs
*                     to the given Business Key)
*                  3. If it already exists: call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY .
  data: EX_OS_OBJECT_NOT_FOUND type ref to CX_OS_OBJECT_NOT_FOUND.
  data: EX_OS_OBJECT_STATE type ref to CX_OS_OBJECT_STATE.
  data: BKEY_STRING type STRING.

* 1. Check if there is already an object with that business key

  clear: CURRENT_OBJECT_IREF,
         CURRENT_SPECIAL_OBJECT_INFO.

*&lt; Generated from mapping:
  BUSINESS_KEY-DOC_ID = I_DOC_ID.
  BUSINESS_KEY-DOC_USER = I_DOC_USER.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 2. If not: create representative object and check
*   *    if there is an entry on DB (Need to be sure that
*   *    no other object exists with the OID that belongs
*   *    to the given Business Key)

    try.

        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

      catch CX_OS_OBJECT_NOT_FOUND into EX_OS_OBJECT_NOT_FOUND.
*       * If the object is not found by key - raise object not existing
*       * by key. If a reference has a illegal class GUID (i.e. object
*       * not found by ref error) - ignore.
        if ( EX_OS_OBJECT_NOT_FOUND-&gt;TEXTID =
             CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY ).
          call method OS_CLEAR_CURRENT.
          class CX_OS_OBJECT_NOT_EXISTING definition load.
          raise exception type CX_OS_OBJECT_NOT_EXISTING
            exporting
              BKEY   = EX_OS_OBJECT_NOT_FOUND-&gt;BKEY
              TABLE  = EX_OS_OBJECT_NOT_FOUND-&gt;TABLE
              TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;BY_BKEY.
        endif.

      cleanup.
        call method OS_CLEAR_CURRENT.

    endtry.



  endif.&quot; ( No Entry in administrative data? )


* * 3. If it already exists: call PM_DELETE_PERSISTENT
  if not ( CURRENT_OBJECT_IREF is initial ).

    try.

        call method PM_DELETE_PERSISTENT.

      catch CX_OS_OBJECT_STATE into EX_OS_OBJECT_STATE.
      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;TRANSIENT ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID = CX_OS_OBJECT_NOT_EXISTING=&gt;TRANSIENT_BY_BKEY.
      endif.

      if ( EX_OS_OBJECT_STATE-&gt;TEXTID =
           CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED ).
        BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
        class CX_OS_OBJECT_NOT_EXISTING definition load.
        raise exception type CX_OS_OBJECT_NOT_EXISTING
          exporting
            BKEY   = BKEY_STRING
            TEXTID =
              CX_OS_OBJECT_NOT_EXISTING=&gt;CREATED_AND_DELETED_BY_BKEY.
      endif.

    endtry.

  endif.
           &quot;DELETE_PERSISTENT
endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="DELETE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Delete current entry SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is deleted
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

  delete table SPECIAL_BKEY_TAB
    with table key
      BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  delete SPECIAL_OBJECT_INFO index CURRENT_OBJECT_INDEX.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;DELETE_SPECIAL_OBJECT_INFO
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Get Persistent Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_PERSISTENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_PERSISTENT" SCONAME="I_DOC_USER" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCUSER"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_PERSISTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Persistent Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_P_ARCHIVE_CENTRAL"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_PERSISTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_PERSISTENT.
***BUILD 093901
*      importing I_DOC_ID TYPE ZARCHIVE_DOCID.
*      importing I_DOC_USER TYPE ZARCHIVE_DOCUSER.
*      returning RESULT TYPE REF TO ZCL_P_ARCHIVE_CENTRAL
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an persistent object.
*
* Version        : 2.0
*
* Precondition   : --
*
* Postcondition  : Persistent object is active
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                    (IS_TRANSIENT_BY_BKEY,DELETED_BY_BKEY)
*                  propagates PM_LOAD_AND_SET_ATTRIBUTES
*                  propagates OS_PM_LOADED_PERISISTENT
*
* Implementation : 1. Look for object in SPECIAL_OBJECT_INFO. If found,
*                     check if it is still valid
*                  2. Object found: Check PM_STATUS
*                     2a. If Status is TRANSIENT or DELETED, error!
*                     2b. If Status is NOT_LOADED, continue with 3.
*                     2c. If Status is NEW, LOADED or CHANGED, success!
*                  3. Load object data from database and set object
*                  3.a. Completion in super class
*                  4. clean up
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-07   : (BGR) Version 2.0 - Common Superclass
* - 2000-08-02   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
* - 2004-01-21   : (SB)  Type Mapping Refactoring
************************************************************************

  data: BUSINESS_KEY    type TYP_BUSINESS_KEY,
        FLAG_NOT_LOADED type OS_BOOLEAN,
        BKEY_STRING     type STRING.

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. Look for object in SPECIAL_OBJECT_INFO. If found, check if it
* * is still valid

  clear:  CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-DOC_ID = I_DOC_ID.
  BUSINESS_KEY-DOC_USER = I_DOC_USER.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table key BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

  if ( not CURRENT_OBJECT_IREF is initial ).

* * 2. Object found: Check PM_STATUS

    case CURRENT_OBJECT_INFO-PM_STATUS.

*   * 2a. If Status is TRANSIENT or DELETED, error!
    when OSCON_OSTATUS_DELETED.

*!!!!! Error: Object activation failed - Object marked for deletion
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;DELETED_BY_BKEY.

    when OSCON_OSTATUS_TRANSIENT.

*!!!!! Error: Object activation failed - Object is transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_TRANSIENT_BY_BKEY.


*   * 2b. If Status is NOT_LOADED, continue with 3.
    when OSCON_OSTATUS_NOT_LOADED.

      FLAG_NOT_LOADED      = OSCON_TRUE.

*   * 2c. If Status is NEW, LOADED or CHANGED, success!
    when others.

      FLAG_NOT_LOADED      = OSCON_FALSE.

    endcase. &quot;PM_STATUS

  else.&quot; ( CURRENT_OBJECT_IREF is initial ).

    FLAG_NOT_LOADED      = OSCON_TRUE.

  endif.&quot; ( Entry in administrative data? )

* * 3. Load object data from database and set object

  if (  FLAG_NOT_LOADED = OSCON_TRUE ).

*   * internal Undo
    append INTERNAL_NEXT_UNDO_INFO to INTERNAL_TRANSACTION_STACK.
    INTERNAL_CURRENT_TRANSACTION = SY-TABIX.

    try.
        call method PM_LOAD_AND_SET_ATTRIBUTES
             exporting I_BUSINESS_KEY = BUSINESS_KEY.

        result ?= CURRENT_OBJECT_IREF.

*       * 3.a. Completion in super class
        call method OS_PM_LOADED_PERSISTENT.

      cleanup.
        call method OS_INTERNAL_UNDO.
        call method OS_CLEAR_CURRENT.
        clear CURRENT_SPECIAL_OBJECT_INFO.
    endtry.

*   * Clean-up internal Undo
    delete INTERNAL_TRANSACTION_STACK
           index INTERNAL_CURRENT_TRANSACTION.
    add -1 to INTERNAL_CURRENT_TRANSACTION.
    if ( INTERNAL_TRANSACTION_STACK is initial ).
      clear INTERNAL_UNDO_INFO.
      INTERNAL_NEXT_UNDO_INFO = 1.
    endif. &quot;( INTERNAL_TRANSACTION_STACK is initial? )

  else. &quot;( Object already loaded )

    RESULT ?= CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.

  endif. &quot;( Loading necessesary? )

* * 4. clean up

  clear  CURRENT_SPECIAL_OBJECT_INFO.


           &quot;GET_PERSISTENT
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_TRANSIENT" VERSION="1" LANGU="E" DESCRIPT="Get Transient Object with Key" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_TRANSIENT" SCONAME="I_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_TRANSIENT" SCONAME="I_DOC_USER" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCUSER"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_TRANSIENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Transient Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_P_ARCHIVE_CENTRAL"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="GET_TRANSIENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method GET_TRANSIENT.
***BUILD 093901
*      IMPORTING I_DOC_ID TYPE ZARCHIVE_DOCID.
*      IMPORTING I_DOC_USER TYPE ZARCHIVE_DOCUSER.
*      RETURNING RESULT TYPE REF TO ZCL_P_ARCHIVE_CENTRAL
*       raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get reference of an transient object.
*
* Version        : 2.0
*
* Precondition   : object has been created transient
*
* Postcondition  : --
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*                  (TRANSIENT_BY_BKEY, IS_PERSISTENT_BY_BKEY)
*
* Implementation : 1. look for entry in SPECIAL_OBJECT_INFO and check
*                     if it is still valid
*                  2. If it not valid or no object found: Error
*                  3. If it is valid: Check state
*                    3a. Not Transient: Error!
*                    3b. Transient: Success!
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2000-10-30   : (SB)  Type Mapping
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY,
        BKEY_STRING  type STRING .

  data: TEMP_CURRENT_OBJECT_IREF type ref to OBJECT.

* * 1. look for entry in SPECIAL_OBJECT_INFO and check if it is
* *    still valid

  clear CURRENT_OBJECT_IREF.

*&lt; Generated from mapping:
  BUSINESS_KEY-DOC_ID = I_DOC_ID.
  BUSINESS_KEY-DOC_USER = I_DOC_USER.
*&gt;

  read table SPECIAL_BKEY_TAB into CURRENT_SPECIAL_OBJECT_INFO
       with table KEY BUSINESS_KEY = BUSINESS_KEY.

  if ( SY-SUBRC = 0 ).

    read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
         with table key
         OBJECT_ID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.
    call method OS_LOAD_AND_VALIDATE_CURRENT
         exporting I_INDEX = SY-TABIX.

  endif.

* * 2. If it not valid or no object found: Error
  if ( CURRENT_OBJECT_IREF is initial ).

*!!! Error: Object activation failed - no entry in administrative data
    BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_NOT_FOUND definition load.
    raise exception type CX_OS_OBJECT_NOT_FOUND
      exporting
        BKEY   = BKEY_STRING
        TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;TRANSIENT_BY_BKEY.

  else. &quot;( Entry exists )

*   * 3. If it is valid: Check state
    if ( CURRENT_OBJECT_INFO-PM_STATUS &lt;&gt; OSCON_OSTATUS_TRANSIENT ).

*     * 3a. Not Transient: Error!
*!!!!! Error: Object is not transient
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      BKEY_STRING  = MAP_SERIALIZE_BKEY( BUSINESS_KEY ).
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          OBJECT = TEMP_CURRENT_OBJECT_IREF
          BKEY   = BKEY_STRING
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;IS_PERSISTENT_BY_BKEY.

    endif. &quot;( PM_STATUS &lt;&gt; transient )

  endif.&quot; ( Entry in administrative data? )

* * 3b. Transient: Success!
  RESULT ?= CURRENT_OBJECT_IREF.
  call method OS_CLEAR_CURRENT.
  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;GET_TRANSIENT
endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="LOAD_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method LOAD_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Load CURRENT_SPECIAL_OBJECT_INFO from
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is loaded
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  read table SPECIAL_OBJECT_INFO into CURRENT_SPECIAL_OBJECT_INFO
       index CURRENT_OBJECT_INDEX.

           &quot;LOAD_SPECIAL_OBJECT_INFO
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_EXTRACT_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Extracts BKey from Database Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="I_DB_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from DB" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_EXTRACT_IDENTIFIER" SCONAME="E_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key Extracted from Database Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <source>method MAP_EXTRACT_IDENTIFIER.
***BUILD 093901
     &quot; importing I_DB_DATA type TYP_DB_DATA
     &quot; exporting E_BUSINESS_KEY type TYP_BUSINESS_KEY
************************************************************************
* Purpose        : Extract Business Key from given DB_DATA
*
* Version        : 2.0
*
* Precondition   : DB_DATA is a structure with object data read from
*                  DB including Keys and GUID
*
* Postcondition  : E_BUSINESS_KEY is the business key extracted from
*                  I_DB_DATA
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-02   : (SB) OO Exceptions
************************************************************************
* Generated! Do not modify!
************************************************************************

*&lt;Generated from mapping:
  E_BUSINESS_KEY-DOC_ID  = I_DB_DATA-DOC_ID.
  E_BUSINESS_KEY-DOC_USER  = I_DB_DATA-DOC_USER.
*&gt;

           &quot;MAP_EXTRACT_IDENTIFIER
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_GET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Reads Persistent Attributes from Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="I_OBJECT_REF_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Objects Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF_TAB"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_GET_ATTRIBUTES" SCONAME="E_OBJECT_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data Read" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_GET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_REF_TAB  type TYP_OBJECT_REF_TAB
     &quot; exporting value(E_OBJECT_DATA_TAB) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Get object data from objects
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF_TAB is a list of objects that have a
*                  valid state (new, changed)
*
* Postcondition  : E_OBJECT_DATA_TAB contains all object data of the
*                  given objects. It is a table of the same size like
*                  I_OBJECT_REF_TAB with corresponding entries.
*                  GUID (and Business Key) will be added later.
*
* OO Exceptions  : CX_OS_OBJECT_REFERENCE collects GET_OID_BY_REF
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_P_ARCHIVE_CENTRAL,
        OBJECT_DATA_ITEM type TYP_DB_DATA,
        PM_SERVICE       type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  data: EX     type ref to CX_OS_ERROR, &quot;#EC NEEDED
        EX_SYS type ref to CX_OS_SYSTEM_ERROR, &quot;#EC NEEDED
        EX_TAB type OSTABLEREF.

  PM_SERVICE ?= PERSISTENCY_MANAGER.

  loop at I_OBJECT_REF_TAB into THE_OBJECT.

    clear OBJECT_DATA_ITEM.

*&lt;  Generated from mapping:
    OBJECT_DATA_ITEM-DOC_ID = THE_OBJECT-&gt;DOC_ID.
    OBJECT_DATA_ITEM-DOC_USER = THE_OBJECT-&gt;DOC_USER.
    OBJECT_DATA_ITEM-DOC_FILENAME = THE_OBJECT-&gt;DOC_FILENAME.
    OBJECT_DATA_ITEM-DOC_CONTENT = THE_OBJECT-&gt;DOC_CONTENT.
    OBJECT_DATA_ITEM-DOC_SIZE = THE_OBJECT-&gt;DOC_SIZE.
    OBJECT_DATA_ITEM-DOC_CREATION_DATE = THE_OBJECT-&gt;DOC_CREATION_DATE.
    OBJECT_DATA_ITEM-DOC_CREATION_TIME = THE_OBJECT-&gt;DOC_CREATION_TIME.
*&gt;

    APPEND OBJECT_DATA_ITEM TO E_OBJECT_DATA_TAB.

  endloop.&quot;at I_OBJECT_REF_TAB

  if ( not EX_TAB is initial ).
    raise exception type CX_OS_OBJECT_REFERENCE
          exporting EXCEPTION_TAB = EX_TAB.
  endif.

           &quot;MAP_GET_ATTRIBUTES
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="MAP_INVALIDATE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method MAP_INVALIDATE.
***BUILD 093901
     &quot; importing I_OBJECT_IREF_TAB type TYP_OBJECT_TAB
************************************************************************
* Purpose        : Invalidate state of all objects in I_OBJECT_IREF_TAB
*
* Version        : 2.0
*
* Precondition   : Objects in I_OBJECT_IREF_TAB exist
*
* Postcondition  : Their state in cleared
*
* OO Exceptions  : -
*
* Implementation : - call method IF_OS_STATE~INVALIDATE
*                  - clear object&apos;s (persistent) attributes
*
************************************************************************
* Changelog:
* - 2000-04-17   : (BGR) Initial Version
* - 2000-08-02   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

  data: OBJECT_IREF type TYP_OBJECT_IREF,
        THE_OBJECT  type ref TO ZCL_P_ARCHIVE_CENTRAL.

  loop at I_OBJECT_IREF_TAB into OBJECT_IREF.

    if ( not OBJECT_IREF is initial ).

      call method OBJECT_IREF-&gt;INVALIDATE.

      THE_OBJECT ?= OBJECT_IREF.

*&lt;    Generated from Mapping:
      clear: THE_OBJECT-&gt;DOC_ID,
             THE_OBJECT-&gt;DOC_USER,
             THE_OBJECT-&gt;DOC_FILENAME,
             THE_OBJECT-&gt;DOC_CONTENT,
             THE_OBJECT-&gt;DOC_SIZE,
             THE_OBJECT-&gt;DOC_CREATION_DATE,
             THE_OBJECT-&gt;DOC_CREATION_TIME.
*&gt;

    endif. &quot;( not initial )

  endloop. &quot;at I_OBJECT_IREF_TAB

           &quot;MAP_INVALIDATE
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" VERSION="1" LANGU="E" DESCRIPT="Reads Object Data Identified Using Bus. Key from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="Business Key of the Data to Be Loaded" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_LOAD_FROM_DATABASE_KEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Object Data Read from the Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_LOAD_FROM_DATABASE_KEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; returning value(RESULT) type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Load object data identified by I_BUSINESS_KEY_TAB
*                  from DB to DB_DATA Table
*
* Version        : 2.0
*
* Precondition   : I_BUSINESS_KEY_TAB is a table of valid business keys
*
* Postcondition  : RESULT is the corresponding table of object
*                  attributes read from DB
*
* OO Exceptions  : CX_OS_DB_SELECT
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0 - difference between loading 1 and
*                  many entries
* - 2000-06-15   : (BGR) Support for multi-table loading
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-03-27   : (MWI) Loading several objects (type mapping)
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  Bugfix for tables with namespace
* - 2002-01-17   : (SB)  private attributes in super classes
* - 2004-01-07   : (SB)  Multi Access
* - 2005-02-22   : (SB)  Inner Joins
* - 2005-04-06   : (SB)  Single Table
************************************************************************


  data: DB_DATA           type TYP_DB_DATA.

*&lt; Generated from mapping:
  types: TYP_DB_DATA_LOCAL type ZARCHIVE_CENTRAL.
*&gt;

  types:
    TYP_DB_DATA_LOCAL_TAB type standard table of
      TYP_DB_DATA_LOCAL with non-unique default key .

  data: DB_DATA_LOCAL_TAB type TYP_DB_DATA_LOCAL_TAB.

  field-symbols: &lt;FS_DB_DATA_LOCAL&gt; type TYP_DB_DATA_LOCAL.

*&lt; Generated from mapping:
  field-symbols: &lt;FS_DB_ZARCHIVE_CENTRAL&gt; type ZARCHIVE_CENTRAL.
*&gt;

*&lt; Generated from mapping:
  select * from ZARCHIVE_CENTRAL
           into table DB_DATA_LOCAL_TAB
           for all entries in I_BUSINESS_KEY_TAB
           where ZARCHIVE_CENTRAL~DOC_ID = I_BUSINESS_KEY_TAB-DOC_ID
             and ZARCHIVE_CENTRAL~DOC_USER =
             I_BUSINESS_KEY_TAB-DOC_USER.
*&gt;

* * error handling
  if ( SY-SUBRC &lt;&gt; 0 ).
    class CX_OS_DB_SELECT definition load.
    raise exception type CX_OS_DB_SELECT
         exporting TABLE  = &apos;ZARCHIVE_CENTRAL&apos;
                   TEXTID = CX_OS_DB_SELECT=&gt;BY_BKEYTAB.
  endif. &quot;( Error )

  loop at DB_DATA_LOCAL_TAB assigning &lt;FS_DB_DATA_LOCAL&gt;.

    assign &lt;FS_DB_DATA_LOCAL&gt; to &lt;FS_DB_ZARCHIVE_CENTRAL&gt;.

*&lt; Generated from mapping:
    DB_DATA-DOC_ID = &lt;FS_DB_ZARCHIVE_CENTRAL&gt;-DOC_ID.
    DB_DATA-DOC_USER = &lt;FS_DB_ZARCHIVE_CENTRAL&gt;-DOC_USER.
    DB_DATA-DOC_FILENAME = &lt;FS_DB_ZARCHIVE_CENTRAL&gt;-DOC_FILENAME.
    DB_DATA-DOC_CONTENT = &lt;FS_DB_ZARCHIVE_CENTRAL&gt;-DOC_CONTENT.
    DB_DATA-DOC_SIZE = &lt;FS_DB_ZARCHIVE_CENTRAL&gt;-DOC_SIZE.
    DB_DATA-DOC_CREATION_DATE =
    &lt;FS_DB_ZARCHIVE_CENTRAL&gt;-DOC_CREATION_DATE.
    DB_DATA-DOC_CREATION_TIME =
    &lt;FS_DB_ZARCHIVE_CENTRAL&gt;-DOC_CREATION_TIME.
*&gt;

    append DB_DATA to RESULT.

  endloop.&quot; at DB_DATA_LOCAL_TAB

           &quot;MAP_LOAD_FROM_DATABASE_KEY
endmethod.
&quot;#EC CI_VALPAR</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_MERGE_IDENTIFIER" VERSION="1" LANGU="E" DESCRIPT="Adds BKey to DB Data" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="I_BUSINESS_KEY_TAB" VERSION="1" LANGU="E" DESCRIPT="List of Business Keys" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY_TAB"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_MERGE_IDENTIFIER" SCONAME="C_DB_DATA_TAB" VERSION="1" LANGU="E" DESCRIPT="Object Data in Which Identifiers Are to Be Mixed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_MERGE_IDENTIFIER.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY_TAB type TYP_BUSINESS_KEY_TAB
     &quot; changing C_DB_DATA_TAB type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Merge Table I_BUSINESS_KEY_TAB to C_DB_DATA_TAB.
*                  The result is a complete DB_DATA table to be stored
*                  in DB.
*
* Version        : 2.0
*
* Precondition   : C_DB_DATA is a Table filled with object data
*                  I_BUSINESS_KEY_TAB is a table of the same size with
*                  corresponding entries.
*
* Postcondition  : C_DB_DATA_TAB is complete
*
* OO Exceptions  : --
*
* Implementation :
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: BUSINESS_KEY type TYP_BUSINESS_KEY.

  field-symbols &lt;FS_OBJECT_DATA&gt; type TYP_DB_DATA.

  loop at C_DB_DATA_TAB assigning &lt;FS_OBJECT_DATA&gt;.

    read table I_BUSINESS_KEY_TAB into BUSINESS_KEY
         index SY-TABIX.

*&lt;  Generated from mapping:
    &lt;FS_OBJECT_DATA&gt;-DOC_ID = BUSINESS_KEY-DOC_ID.
    &lt;FS_OBJECT_DATA&gt;-DOC_USER = BUSINESS_KEY-DOC_USER.
*&gt;


  endloop.&quot; at C_DB_DATA_TAB

           &quot;MAP_MERGE_IDENTIFIER
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SAVE_TO_DATABASE" VERSION="1" LANGU="E" DESCRIPT="Saves Object Data in Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_DELETES" VERSION="1" LANGU="E" DESCRIPT="Key of the Data to Be Deleted" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DELETE_TAB"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_INSERTS" VERSION="1" LANGU="E" DESCRIPT="Data to Be Created" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SAVE_TO_DATABASE" SCONAME="I_UPDATES" VERSION="1" LANGU="E" DESCRIPT="Data to Be Changed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA_TAB"/>
   <source>method MAP_SAVE_TO_DATABASE.
***BUILD 093901
     &quot; importing I_DELETES type TYP_DB_DELETE_TAB
     &quot;           I_INSERTS type TYP_DB_DATA_TAB
     &quot;           I_UPDATES type TYP_DB_DATA_TAB
************************************************************************
* Purpose        : Do database operations:
*                  Insert new object data from I_INSERTS,
*                  Update changed object data from I_UPDATES and
*                  Delete entries for deleted objects from I_DELETES
*
* Version        : 2.0
*
* Precondition   : I_DELETES,I_INSERTS and I_UPDATES contain ALL
*                  necessary information (Keys, Data)
*                  If this method is called in update task, there
*                  is NO MORE information, no objects exist anymore.
*
* Postcondition  : All database operations have been performed.
*
* OO Exceptions  : CX_OS_DB_INSERT, CX_OS_DB_UPDATE, CX_OS_DB_DELETE
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 1999-09-21   : (OS)  Initial Version
* - 2000-03-06   : (BGR) Version 2.0
* - 2001-11-26   : (SB)  Refactoring Generation
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************

*&lt; Generated from mapping:

* * ZARCHIVE_CENTRAL: internal tables for mass operation
  data DB_ITB_ZARCHIVE_CENTRAL type STANDARD TABLE OF ZARCHIVE_CENTRAL.
  data DB_UTB_ZARCHIVE_CENTRAL type STANDARD TABLE OF ZARCHIVE_CENTRAL.
  data DB_DTB_ZARCHIVE_CENTRAL type STANDARD TABLE OF ZARCHIVE_CENTRAL.

* * ZARCHIVE_CENTRAL: headlines for tables
  data DB_ILN_ZARCHIVE_CENTRAL type ZARCHIVE_CENTRAL.
  data DB_ULN_ZARCHIVE_CENTRAL type ZARCHIVE_CENTRAL.
  data DB_DLN_ZARCHIVE_CENTRAL type ZARCHIVE_CENTRAL.

*&gt;

  field-symbols &lt;FS_INSERT&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_UPDATE&gt; type TYP_DB_DATA.
  field-symbols &lt;FS_DELETE&gt; type TYP_SPECIAL_OBJECT_INFO.

* * Collect Inserts
  loop at I_INSERTS assigning &lt;FS_INSERT&gt;.

*&lt; Generated from mapping:



   DB_ILN_ZARCHIVE_CENTRAL-DOC_FILENAME = &lt;FS_INSERT&gt;-DOC_FILENAME.
   DB_ILN_ZARCHIVE_CENTRAL-DOC_CONTENT = &lt;FS_INSERT&gt;-DOC_CONTENT.
   DB_ILN_ZARCHIVE_CENTRAL-DOC_SIZE = &lt;FS_INSERT&gt;-DOC_SIZE.
   DB_ILN_ZARCHIVE_CENTRAL-DOC_CREATION_DATE =
   &lt;FS_INSERT&gt;-DOC_CREATION_DATE.
   DB_ILN_ZARCHIVE_CENTRAL-DOC_CREATION_TIME =
   &lt;FS_INSERT&gt;-DOC_CREATION_TIME.


   DB_ILN_ZARCHIVE_CENTRAL-DOC_ID = &lt;FS_INSERT&gt;-DOC_ID.
   DB_ILN_ZARCHIVE_CENTRAL-DOC_USER = &lt;FS_INSERT&gt;-DOC_USER.
   append DB_ILN_ZARCHIVE_CENTRAL to DB_ITB_ZARCHIVE_CENTRAL.
*&gt;

  endloop. &quot;at I_INSERTS

* * Collect Updates
  loop at I_UPDATES assigning &lt;FS_UPDATE&gt;.

*&lt; Generated from mapping:



   DB_ULN_ZARCHIVE_CENTRAL-DOC_FILENAME = &lt;FS_UPDATE&gt;-DOC_FILENAME.
   DB_ULN_ZARCHIVE_CENTRAL-DOC_CONTENT = &lt;FS_UPDATE&gt;-DOC_CONTENT.
   DB_ULN_ZARCHIVE_CENTRAL-DOC_SIZE = &lt;FS_UPDATE&gt;-DOC_SIZE.
   DB_ULN_ZARCHIVE_CENTRAL-DOC_CREATION_DATE =
   &lt;FS_UPDATE&gt;-DOC_CREATION_DATE.
   DB_ULN_ZARCHIVE_CENTRAL-DOC_CREATION_TIME =
   &lt;FS_UPDATE&gt;-DOC_CREATION_TIME.


   DB_ULN_ZARCHIVE_CENTRAL-DOC_ID = &lt;FS_UPDATE&gt;-DOC_ID.
   DB_ULN_ZARCHIVE_CENTRAL-DOC_USER = &lt;FS_UPDATE&gt;-DOC_USER.
   append DB_ULN_ZARCHIVE_CENTRAL TO DB_UTB_ZARCHIVE_CENTRAL.
*&gt;

  endloop. &quot;at I_UPDATES

* * Collect Deletes
  loop at I_DELETES assigning &lt;FS_DELETE&gt;.

    DB_DLN_ZARCHIVE_CENTRAL-DOC_ID = &lt;FS_DELETE&gt;-BUSINESS_KEY-DOC_ID.
    DB_DLN_ZARCHIVE_CENTRAL-DOC_USER =
    &lt;FS_DELETE&gt;-BUSINESS_KEY-DOC_USER.

    append DB_DLN_ZARCHIVE_CENTRAL TO DB_DTB_ZARCHIVE_CENTRAL.

  endloop. &quot;at I_DELETES

* * Perform DB Operations:

*&lt; Generated from mapping:

* * DB Deletes
  delete ZARCHIVE_CENTRAL FROM TABLE DB_DTB_ZARCHIVE_CENTRAL.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_DELETE
      exporting
        TABLE = &apos;ZARCHIVE_CENTRAL&apos;.
  endif.

* * DB Inserts
  insert ZARCHIVE_CENTRAL FROM TABLE DB_ITB_ZARCHIVE_CENTRAL
    accepting duplicate keys.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_INSERT
      exporting
        TABLE = &apos;ZARCHIVE_CENTRAL&apos;.
  endif.

* * DB Updates
  update ZARCHIVE_CENTRAL FROM TABLE DB_UTB_ZARCHIVE_CENTRAL.
  if SY-SUBRC &lt;&gt; 0.
    raise exception type CX_OS_DB_UPDATE
      exporting
        TABLE = &apos;ZARCHIVE_CENTRAL&apos;.
  endif.

*&gt;
           &quot;MAP_SAVE_TO_DATABASE
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SERIALIZE_BKEY" VERSION="1" LANGU="E" DESCRIPT="Serializes Business Key" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SERIALIZE_BKEY" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Business Key as String" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>method MAP_SERIALIZE_BKEY.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning value(RESULT) type STRING
************************************************************************
* Purpose        : Concatenate business keys into string.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-11-23   : (SB)  initial versiuon
* - 2009-06-03   : (SB)  correct order if edit order is used
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: COMP_STRING type STRING.

*&lt; Generated from mapping:
  COMP_STRING = I_BUSINESS_KEY-DOC_ID.
  concatenate RESULT COMP_STRING into RESULT.
  COMP_STRING = I_BUSINESS_KEY-DOC_USER.
  concatenate RESULT COMP_STRING into RESULT.
*&gt;

           &quot; MAP_SERIALIZE_BKEY
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Sets Persistent Attributes of an Object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Object Data to Be Set" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="I_OBJECT_REF" VERSION="1" LANGU="E" DESCRIPT="Object Affected" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="MAP_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method MAP_SET_ATTRIBUTES.
***BUILD 093901
     &quot; importing I_OBJECT_DATA type TYP_DB_DATA
     &quot;           I_OBJECT_REF  type TYP_OBJECT_REF
     &quot; raising   CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set objects from given object data
*
* Version        : 2.0
*
* Precondition   : I_OBJECT_REF is a reference to the object that will
*                  be set with data from I_OBJECT_DATA
*
* Postcondition  : The object&apos;s attributes are set.
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2002-01-17   : (SB)  private attributes in super classes
************************************************************************
* Generated! Do not modify!
************************************************************************

  data: THE_OBJECT type ref to ZCL_P_ARCHIVE_CENTRAL,
        AN_OBJECT  type ref to object, &quot;#EC NEEDED
        PM_SERVICE type ref to IF_OS_PM_SERVICE. &quot;#EC NEEDED

  PM_SERVICE ?= PERSISTENCY_MANAGER.
  THE_OBJECT = I_OBJECT_REF.

*&lt;  Generated from mapping:
  THE_OBJECT-&gt;DOC_ID = I_OBJECT_DATA-DOC_ID.
  THE_OBJECT-&gt;DOC_USER = I_OBJECT_DATA-DOC_USER.
  THE_OBJECT-&gt;DOC_FILENAME = I_OBJECT_DATA-DOC_FILENAME.
  THE_OBJECT-&gt;DOC_CONTENT = I_OBJECT_DATA-DOC_CONTENT.
  THE_OBJECT-&gt;DOC_SIZE = I_OBJECT_DATA-DOC_SIZE.
  THE_OBJECT-&gt;DOC_CREATION_DATE = I_OBJECT_DATA-DOC_CREATION_DATE.
  THE_OBJECT-&gt;DOC_CREATION_TIME = I_OBJECT_DATA-DOC_CREATION_TIME.
*&gt;

           &quot;MAP_SET_ATTRIBUTES
endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="OS_PM_DELETE_PERSISTENT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method OS_PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exceptions  : propagates PM_DELETE_PERSISTENT
*
* Implementation : load special object info and
*                  call PM_DELETE_PERSISTENT
*
************************************************************************
* Changelog:
* - 2001-12-14   : (SB)  Initial Version
************************************************************************

  call method LOAD_SPECIAL_OBJECT_INFO( ).

  call method PM_DELETE_PERSISTENT( ).

           &quot;OS_PM_DELETE_PERSISTENT .
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Checks and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_ID_PROVIDED" VERSION="1" LANGU="E" DESCRIPT="With Which Identifiers Were Loading and Checking Performed" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_ID_STATUS" PARVALUE="0" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="I_OBJECT_DATA" VERSION="1" LANGU="E" DESCRIPT="Data Loaded from Database" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_DB_DATA"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CHECK_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_CHECK_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_OBJECT_DATA  type TYP_DB_DATA
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional
     &quot;           I_ID_PROVIDED type TYP_ID_STATUS default ID_STATUS_NONE
************************************************************************
* Purpose        : check loaded object data of a persistent object and
*                  set object&apos;s attributes
*                  if CURRENT is clear, create new representant,
*                  if CURRENT is set, use this object to set the loaded
*                  data
*                  If I_ID_PROVIDED is set to ID_STATUS_NONE, Look for
*                  an entry in SPECIAL_OBJECT_INFO with the given
*                  Business Key
*
* Version        : 2.0
*
* Precondition   :
*
* Postcondition  : Persistent object data is checked and object
*                  attributes are set. CURRENT is set.
*
* OO Exception   : CX_OS_OBJECT_STATE(INTERNAL_CHANGED,INTERNAL_DELETED,
*                                     INTERNAL_TRANSIENT, INTERNAL_NEW)
*                  propagates MAP_SET_ATTRIBUTES
*
* Implementation : 1. If CURRENT is clear:
*                   1a. I_ID_PROVIDED = ID_STATUS_NONE?:
*                       Check if another object exists with this
*                       Business Key
*                   1b. I_ID_PROVIDED &lt;&gt; ID_STATUS_NONE or no entry
*                       found:
*                       Create a new Representative object
*                   1c. If an object has been found:
*                       Check if it is allowed to set it
*                  2. set PM_DBSTATUS EXISTING
*                  3. Temporarily save CURRENT_*
*                  4. set object attributes (resolving references)
*                  5. restore CURRENT_*
*
************************************************************************
* Changelog:
* - 2000-05-17   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: LOADED_BUSINESS_KEY       type TYP_BUSINESS_KEY.

  data: TEMP_CURRENT_OBJECT_INFO  type TYP_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_INDEX type TYP_INDEX,
        TEMP_CURRENT_SPECIAL_OI   type TYP_SPECIAL_OBJECT_INFO,
        TEMP_CURRENT_OBJECT_IREF  type TYP_OBJECT_IREF,
        INTERNAL_UNDO_INFO_ITEM   type TYP_INTERNAL_UNDO_INFO,
        TEMP_OBJECT_REF           type TYP_OBJECT_REF.

* * Get both Business Key from DB data
  call method MAP_EXTRACT_IDENTIFIER
       exporting I_DB_DATA      = I_OBJECT_DATA
       importing E_BUSINESS_KEY = LOADED_BUSINESS_KEY.

  if ( CURRENT_OBJECT_IREF is initial ).

*   * 1. If CURRENT is clear:

    if ( I_ID_PROVIDED = ID_STATUS_NONE ).

*   * 1a. Check if another object exists with this Business Key

      read table SPECIAL_BKEY_TAB into TEMP_CURRENT_SPECIAL_OI
           with table key BUSINESS_KEY = LOADED_BUSINESS_KEY.
      if ( sy-subrc = 0 ).

        read table SPECIAL_OBJECT_INFO into
             CURRENT_SPECIAL_OBJECT_INFO
             with table key
             OBJECT_ID = TEMP_CURRENT_SPECIAL_OI-OBJECT_ID.
        call method OS_LOAD_AND_VALIDATE_CURRENT
             exporting I_INDEX = sy-tabix.

      endif. &quot; ( Entry found for BKEY? )

    endif. &quot;( no ID Provided )

    if ( CURRENT_OBJECT_IREF is initial ).

*     * 1b. Create a new Representative object and a new entry
      call method PM_CREATE_REPRESENTANT
           exporting I_BUSINESS_KEY = LOADED_BUSINESS_KEY.

    else. &quot;( Found an entry for the business key )

*     * Now we know an entry exists on DB
      CURRENT_OBJECT_INFO-PM_DBSTATUS = OSCON_DBSTATUS_EXISTING.
      modify OBJECT_INFO from CURRENT_OBJECT_INFO
             index CURRENT_OBJECT_INDEX.

*     * 1c. Check if it is allowed to use the found object.
      case CURRENT_OBJECT_INFO-PM_STATUS.

*       * PM_STATUS = NOT_LOADED: re-use entry and object
        when OSCON_OSTATUS_NOT_LOADED.

*       * PM_STATUS = LOADED: re-use entry and object
        when OSCON_OSTATUS_LOADED.

*       *  other PM_STATUS: Error!
        when OSCON_OSTATUS_NEW.

*!!!!!!!!!! Error! Object already exists on DB
*         * This NEW object should be created on DB by the next
*         * COMMIT. Now an entry was found with the same key!
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_NEW.

        when OSCON_OSTATUS_CHANGED.

*!!!!!!!!!!! Error: Object has a DB relevant status
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_CHANGED.

        when OSCON_OSTATUS_DELETED.

*!!!!!!!!!!! Error: Object marked for deletion
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                         TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_DELETED.

        when OSCON_OSTATUS_TRANSIENT.

*!!!!!!!!!!! Error: Object is transient
          class CX_OS_OBJECT_STATE definition load.
          raise exception type CX_OS_OBJECT_STATE
               exporting OBJECT = CURRENT_OBJECT_IREF
                        TEXTID = CX_OS_OBJECT_STATE=&gt;INTERNAL_TRANSIENT.

      endcase.

    endif. &quot;( CURRENT initial? )
  endif. &quot;( CURRENT initial? )

* * 2. set PM_DBSTATUS EXISTING
  CURRENT_OBJECT_INFO-PM_DBSTATUS          = OSCON_DBSTATUS_EXISTING.

* * internal Undo entry:
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  INTERNAL_UNDO_INFO_ITEM-OBJECT_INFO  = CURRENT_OBJECT_INFO.
  append INTERNAL_UNDO_INFO_ITEM to INTERNAL_UNDO_INFO.
  INTERNAL_NEXT_UNDO_INFO = sy-tabix + 1.

* * To avoid recursive loading of the same object (INIT method)
* * temporarily set status &apos;LOADING&apos;
  CURRENT_OBJECT_INFO-PM_STATUS = OSCON_OSTATUS_LOADING.
  modify OBJECT_INFO from CURRENT_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

* * 3. Temporarily save CURRENT_*
  TEMP_CURRENT_OBJECT_IREF  = CURRENT_OBJECT_IREF.
  TEMP_CURRENT_OBJECT_INFO  = CURRENT_OBJECT_INFO.
  TEMP_CURRENT_OBJECT_INDEX = CURRENT_OBJECT_INDEX.
  TEMP_CURRENT_SPECIAL_OI   = CURRENT_SPECIAL_OBJECT_INFO.

* * 4. set object attributes (resolving references)
  TEMP_OBJECT_REF ?= CURRENT_OBJECT_IREF .

  call method MAP_SET_ATTRIBUTES
       exporting I_OBJECT_DATA = I_OBJECT_DATA
                 I_OBJECT_REF  = TEMP_OBJECT_REF.

* * 5. restore CURRENT_*
  CURRENT_OBJECT_INFO          = TEMP_CURRENT_OBJECT_INFO.
  CURRENT_OBJECT_INDEX         = TEMP_CURRENT_OBJECT_INDEX.
  CURRENT_SPECIAL_OBJECT_INFO  = TEMP_CURRENT_SPECIAL_OI.
  CURRENT_OBJECT_IREF          = TEMP_CURRENT_OBJECT_IREF.

* * the method call get_ref_by_oid in map_set_attributes
* * eventually creates new entries in the
* * administrative data tables, it is necessary to
* * to recalculate the index
  read table OBJECT_INFO transporting no fields
     with table key OBJECT_ID = CURRENT_OBJECT_INFO-OBJECT_ID.
  CURRENT_OBJECT_INDEX = sy-tabix.

           &quot;PM_CHECK_AND_SET_ATTRIBUTES
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CREATE_REPRESENTANT" VERSION="1" LANGU="E" DESCRIPT="Generate New Wrapper Object and Administration Entry" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_CREATE_REPRESENTANT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Newly Generated Wrapper Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TYP_OBJECT_REF"/>
   <source>method PM_CREATE_REPRESENTANT.
***BUILD 093901
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY
     &quot; returning result         type TYP_OBJECT_REF
************************************************************************
* Purpose        : Create a new representative object including a new
*                  entry in administrative data (OBJECT_INFO and
*                  SPECIAL_OBJECT_INFO)
*
* Version        : 2.0
*
* Precondition   : No object exists with the same Business Key
*
* Postcondition  : A new object exists, corresponding entries in
*                  OBJECT_INFO and SPECIAL_OBJECT_INFO have been
*                  inserted, CURRENT is set
*
* OO Exceptions  : --
*
* Implementation : 1. Create object and set BKey attributes
*                  2. Get internal OID for the new object
*                  3. Create new entry in SPECIAL_OBJECT_INFO
*                  4. Let super class create a new entry in OBJECT_INFO
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
* - 2001-10-30   : (SB)  Type Mapping
************************************************************************

  data: NEW_OBJECT type ref to ZCL_P_ARCHIVE_CENTRAL.

* * 1. Create object and set BKey attributes
  create object NEW_OBJECT.

* &lt; Generated from mapping:
  NEW_OBJECT-&gt;DOC_ID = I_BUSINESS_KEY-DOC_ID.
  NEW_OBJECT-&gt;DOC_USER = I_BUSINESS_KEY-DOC_USER.
* &gt;

* * 2. Get internal OID for the new object and set CURRENT_SPECIAL_OI
  clear CURRENT_SPECIAL_OBJECT_INFO.

  CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID =
      OS_GET_INTERNAL_OID_BY_REF( I_OBJECT = NEW_OBJECT ).
  CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY = I_BUSINESS_KEY.
  CURRENT_SPECIAL_OBJECT_INFO-ID_STATUS = ID_STATUS_COMPLETE.

* * 3. Create new entry in SPECIAL_OBJECT_INFO
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_OBJECT_INFO.
  insert CURRENT_SPECIAL_OBJECT_INFO into table SPECIAL_BKEY_TAB.

* * 4. Let super class create a new entry in OBJECT_INFO
  call method OS_CREATE_NEW_ENTRY_FOR_REPR
       exporting I_OBJECT = NEW_OBJECT
                 I_INTERNAL_OID = CURRENT_SPECIAL_OBJECT_INFO-OBJECT_ID.

  RESULT = NEW_OBJECT.

           &quot;PM_CREATE_REPRESENTANT
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_DELETE_PERSISTENT" VERSION="1" LANGU="E" DESCRIPT="Deletes Persistent Object from Database" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_DELETE_PERSISTENT.
***BUILD 090501
************************************************************************
* Purpose        : Delete persistent object. It is marked DELETED in
*                  memory and removed from DB when the top transaction
*                  is closed.
*
* Version        : 2.0
*
* Precondition   : The object is persistent (not transient), CURRENT
*                  is set
*
* Postcondition  : Instance is marked for deletion.
*
* OO Exception   : CX_OS_OBJECT_STATE(CREATED_AND_DELETED,TRANSIENT)
*                  propagates OS_PM_DELETED_PERSISTENT
*                  ( propagates MAP_LOAD_FROM_DATABASE_KEY )
*
* Implementation : 1. Check the state of the object:
*                    1a. Object is already deleted - done
*                    1b. Object is transient - Error
*                    1c. Object is new, loaded or changed - continue
*                    1d. Object is not_loaded:
*                        Check DBSTATUS:
*                       1d1. DBSTATUS Unknown/Existing - continue
*                       1d2. DBSTATUS Not existing - Error
*                   2. Completion: call OS_PM_DELETED_PERSISTENT
*
************************************************************************
* Changelog:
* - 2000-03-06   : (BGR) Initial Version 2.0
* - 2000-08-03   : (SB) OO Exceptions
************************************************************************

  data: TEMP_CURRENT_OBJECT_IREF type TYP_OBJECT_IREF .

* * 1. Check the state of the object:
  case CURRENT_OBJECT_INFO-PM_STATUS.

  when OSCON_OSTATUS_DELETED.

*   * 1a. Object is already deleted - done
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    exit.


  when OSCON_OSTATUS_TRANSIENT.

*   * 1b. Object is transient - Error
*!! error: object already exists transient
    TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
    call method OS_CLEAR_CURRENT.
    clear CURRENT_SPECIAL_OBJECT_INFO.
    class CX_OS_OBJECT_STATE definition load.
    raise exception type CX_OS_OBJECT_STATE
         exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                   TEXTID = CX_OS_OBJECT_STATE=&gt;TRANSIENT.


  when OSCON_OSTATUS_NEW     or
       OSCON_OSTATUS_CHANGED or
       OSCON_OSTATUS_LOADED.

*   * 1c. Object is new, loaded or changed - continue


  when OSCON_OSTATUS_NOT_LOADED.

*   * 1d. Object is not_loaded: Check DBSTATUS:
    case CURRENT_OBJECT_INFO-PM_DBSTATUS.


    when OSCON_DBSTATUS_EXISTING
      or OSCON_DBSTATUS_UNKNOWN.

*     * 1d1. DBSTATUS Existing/Unknown - continue


    when OSCON_DBSTATUS_NOT_EXISTING.
*     * 1d2. DBSTATUS Not existing - Error
*!!!! error: No DB entry for the object
      TEMP_CURRENT_OBJECT_IREF = CURRENT_OBJECT_IREF.
      call method OS_CLEAR_CURRENT.
      clear CURRENT_SPECIAL_OBJECT_INFO.
      class CX_OS_OBJECT_STATE definition load.
      raise exception type CX_OS_OBJECT_STATE
           exporting OBJECT = TEMP_CURRENT_OBJECT_IREF
                     TEXTID = CX_OS_OBJECT_STATE=&gt;CREATED_AND_DELETED.

    endcase. &quot;PM_DBSTATUS
  endcase. &quot;PM_STATUS

* * 2. Completion: call OS_PM_DELETED_PERSISTENT
  call method OS_PM_DELETED_PERSISTENT.

  clear CURRENT_SPECIAL_OBJECT_INFO.

           &quot;PM_DELETE_PERSISTENT
endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="PM_LOAD" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method PM_LOAD.
***BUILD 090501
************************************************************************
* Purpose        : Load data from DB into Object specified by CURRENT
*
* Version        : 2.0
*
* Precondition   : CURRENT_* is set
*
* Postcondition  : object is loaded or exceptions is raised
*
* OO Exceptions  : propagates PM_LOAD_AND_SET_ATTRIBUTES
*
* Implementation : call PM_LOAD_AND_SET_ATTRIBUTES
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
* - 2000-08-03   : (SB)  OO Exceptions
* - 2001-11-14   : (SB)  Type mapping
************************************************************************

  call method PM_LOAD_AND_SET_ATTRIBUTES
       exporting I_BUSINESS_KEY =
                         CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

           &quot;PM_LOAD
endmethod.</source>
  </method>
  <method CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" VERSION="1" LANGU="E" DESCRIPT="Loads and Sets Persistent Attributes" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="I_BUSINESS_KEY" VERSION="1" LANGU="E" DESCRIPT="Business Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TYP_BUSINESS_KEY" PAROPTIONL="X"/>
   <exception CLSNAME="ZCB_P_ARCHIVE_CENTRAL" CMPNAME="PM_LOAD_AND_SET_ATTRIBUTES" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="0" EDITORDER="0 "/>
   <source>method PM_LOAD_AND_SET_ATTRIBUTES.
***BUILD 090501
     &quot; importing I_BUSINESS_KEY type TYP_BUSINESS_KEY optional

************************************************************************
* Purpose        : Load object data of a persistent object and set
*                  object&apos;s attributes
*                  if CURRENT is clear, load data using I_BUSINESS_KEY.
*                  if CURRENT is set, use the BKEY stored there.
*
* Version        : 2.0
*
* Precondition   : An entry for the given Business Key exists on
*                  database. CURRENT can be set (use this
*                  object to set attributes to) or clear.
*
* Postcondition  : Persistent object data is loaded and object
*                  attributes are set. CURRENT is set.
*
* OO Exceptions  : propagates PM_CHECK_AND_SET_ATTRIBUTES
*                  propagates MAP_LOAD_FROM_DATABASE_KEY/GUID
*
* Implementation : 1. Check Source of DB Keys: Business Key from
*                     CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY
*                  2. Load from Database
*                  2.a. Type Mapping: Set E_TYPE and return if case of
*                       type mismatch
*                  3. Check loaded data and set object&apos;s attributes
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-05-17   : (BGR) use PM_CHECK_AND_SET_ATTRIBUTES
* - 2000-08-03   : (SB) OO Exceptions
* - 2004-01-21   : (SB) Type Mapping Refactoring
* - 2005-02-22   : (SB) Set Exception parameters
************************************************************************

  data: OBJECT_DATA_TAB     type TYP_DB_DATA_TAB,
        OBJECT_DATA         type TYP_DB_DATA,
        BUSINESS_KEY        type TYP_BUSINESS_KEY,
        BUSINESS_KEY_TAB    type TYP_BUSINESS_KEY_TAB.

  data: SERIALIZED_BUSINESS_KEY  type STRING .

* * 1. Check Source of DB Keys: Business Key from
* *    CURRENT_SPECIAL_OBJECT_INFO or from I_BUSINESS_KEY?
  if ( CURRENT_OBJECT_IREF is initial ).

    BUSINESS_KEY = I_BUSINESS_KEY.

  else. &quot;( CURRENT is set ).

*   * Get BKey from CURRENT_SPECIAL_OBJECT_INFO
    BUSINESS_KEY = CURRENT_SPECIAL_OBJECT_INFO-BUSINESS_KEY.

  endif. &quot;( CURRENT set? ).


* * 2. Load from Database
  try.
      append BUSINESS_KEY to BUSINESS_KEY_TAB.
      call method MAP_LOAD_FROM_DATABASE_KEY
           exporting I_BUSINESS_KEY_TAB = BUSINESS_KEY_TAB
           receiving result = OBJECT_DATA_TAB.
    catch CX_OS_DB_SELECT.
      class CX_OS_OBJECT_NOT_FOUND definition load.
      call method MAP_SERIALIZE_BKEY
           exporting I_BUSINESS_KEY = BUSINESS_KEY
           receiving RESULT = SERIALIZED_BUSINESS_KEY.
      raise exception type CX_OS_OBJECT_NOT_FOUND
        exporting
          BKEY   = SERIALIZED_BUSINESS_KEY
          TEXTID = CX_OS_OBJECT_NOT_FOUND=&gt;BY_BKEY.
  endtry.

  read table OBJECT_DATA_TAB into OBJECT_DATA index 1.


* * 3. Now Check the loaded data and set the Object.
  call method PM_CHECK_AND_SET_ATTRIBUTES
       exporting I_OBJECT_DATA  = OBJECT_DATA
                 I_BUSINESS_KEY = BUSINESS_KEY
                 I_ID_PROVIDED  = ID_STATUS_COMPLETE.

           &quot;PM_LOAD_AND_SET_ATTRIBUTES
endmethod.</source>
  </method>
  <method CLSNAME="CL_OS_CA_COMMON" CMPNAME="SAVE_SPECIAL_OBJECT_INFO" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method SAVE_SPECIAL_OBJECT_INFO.
***BUILD 090501
************************************************************************
* Purpose        : Save CURRENT_SPECIAL_OBJECT_INFO into
*                  SPECIAL_OBJECT_INFO
*
* Version        : 2.0
*
* Precondition   : Index is set in CURRENT_OBJECT_INDEX
*
* Postcondition  : entry is saved
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-02   : (BGR) Initial Version
************************************************************************

  modify SPECIAL_OBJECT_INFO from CURRENT_SPECIAL_OBJECT_INFO
         index CURRENT_OBJECT_INDEX.

           &quot;SAVE_SPECIAL_OBJECT_INFO
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_P_ARCHIVE_CENTRAL" VERSION="1" LANGU="E" DESCRIPT="Persistent Class for Central Archive" UUID="02023211AE4F1ED28DAC24D10F274BFB" CATEGORY="10" EXPOSURE="1" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <friends CLSNAME="ZCL_P_ARCHIVE_CENTRAL" REFCLSNAME="ZCB_P_ARCHIVE_CENTRAL" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <implementing CLSNAME="ZCL_P_ARCHIVE_CENTRAL" REFCLSNAME="IF_OS_STATE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeClasDef CLSNAME="ZCL_P_ARCHIVE_CENTRAL" TYPEGROUP="CL_OS_SYSTEM" VERSION="1" TPUTYPE="1"/>
  <attribute CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="DOC_CONTENT" VERSION="1" LANGU="E" DESCRIPT="Document Content" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZARCHIVE_DOCCONTENT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="DOC_CREATION_DATE" VERSION="1" LANGU="E" DESCRIPT="Document creation date" EXPOSURE="1" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZARCHIVE_DOCCREATIONDATE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="DOC_CREATION_TIME" VERSION="1" LANGU="E" DESCRIPT="Document creation time" EXPOSURE="1" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZARCHIVE_DOCCREATIONTIME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="DOC_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Document Filename" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZARCHIVE_DOCFILENAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Unique Document ID" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="ZARCHIVE_DOCID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="DOC_SIZE" VERSION="1" LANGU="E" DESCRIPT="Document Size" EXPOSURE="1" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="2" TYPTYPE="1" TYPE="ZARCHIVE_DOCSIZE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="DOC_USER" VERSION="1" LANGU="E" DESCRIPT="Document Username" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTPERSIST="X" ATTEXPVIRT="7" TYPTYPE="1" TYPE="ZARCHIVE_DOCUSER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_STATE~GET">
   <source>method IF_OS_STATE~GET.
***BUILD 090501
     &quot; returning result type ref to object
************************************************************************
* Purpose        : Get state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  create object STATE_OBJECT.
  call method STATE_OBJECT-&gt;SET_STATE_FROM_OBJECT( ME ).
  result = STATE_OBJECT.

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_STATE~HANDLE_EXCEPTION">
   <source>method IF_OS_STATE~HANDLE_EXCEPTION.
***BUILD 090501
     &quot; importing I_EXCEPTION type ref to IF_OS_EXCEPTION_INFO optional
     &quot; importing I_EX_OS type ref to CX_OS_OBJECT_NOT_FOUND optional
************************************************************************
* Purpose        : Handles exceptions during attribute access.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : If an exception is raised during attribut access,
*                  this method is called and the exception is passed
*                  as a paramater. The default is to raise the exception
*                  again, so that the caller can handle the exception.
*                  But it is also possible to handle the exception
*                  here in the callee.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
* - 2000-08-02   : (SB)  OO Exceptions
************************************************************************
* Modify if you like
************************************************************************

  if i_ex_os is not initial.
    raise exception i_ex_os.
  endif.

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_STATE~INIT">
   <source>method IF_OS_STATE~INIT.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Initialisation of the transient state partition.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : Transient state is initial.
*
* OO Exceptions  : -
*
* Implementation : Caution!: Avoid Throwing ACCESS Events.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_STATE~INVALIDATE">
   <source>method IF_OS_STATE~INVALIDATE.
***BUILD 090501
&quot;#EC NEEDED
************************************************************************
* Purpose        : Do something before all persistent attributes are
*                  cleared.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : Whatever you like to do.
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* Modify if you like
************************************************************************

endmethod.</source>
  </interfaceMethod>
  <interfaceMethod CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CPDNAME="IF_OS_STATE~SET">
   <source>method IF_OS_STATE~SET.
***BUILD 090501
     &quot; importing I_STATE type ref to object
************************************************************************
* Purpose        : Set state.
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : -
*
* OO Exceptions  : -
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-07   : (BGR) Initial Version 2.0
************************************************************************
* GENERATED: Do not modify
************************************************************************

  data: STATE_OBJECT type ref to CL_OS_STATE.

  STATE_OBJECT ?= I_STATE.
  call method STATE_OBJECT-&gt;SET_OBJECT_FROM_STATE( ME ).

endmethod.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CONTENT" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute DOC_CONTENT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CONTENT" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCCONTENT"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CONTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_DOC_CONTENT.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute DOC_CONTENT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = DOC_CONTENT.

           &quot; GET_DOC_CONTENT
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CREATION_DATE" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute DOC_CREATION_DATE" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CREATION_DATE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCCREATIONDATE"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CREATION_DATE" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_DOC_CREATION_DATE.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute DOC_CREATION_DATE
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = DOC_CREATION_DATE.

           &quot; GET_DOC_CREATION_DATE
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CREATION_TIME" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute DOC_CREATION_TIME" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CREATION_TIME" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCCREATIONTIME"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_CREATION_TIME" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_DOC_CREATION_TIME.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute DOC_CREATION_TIME
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = DOC_CREATION_TIME.

           &quot; GET_DOC_CREATION_TIME
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute DOC_FILENAME" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_FILENAME" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCFILENAME"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_FILENAME" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_DOC_FILENAME.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute DOC_FILENAME
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = DOC_FILENAME.

           &quot; GET_DOC_FILENAME
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_ID" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute DOC_ID" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_ID" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCID"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_ID" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_DOC_ID.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute DOC_ID
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = DOC_ID.

           &quot; GET_DOC_ID
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_SIZE" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute DOC_SIZE" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_SIZE" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCSIZE"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_SIZE" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_DOC_SIZE.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute DOC_SIZE
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = DOC_SIZE.

           &quot; GET_DOC_SIZE
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_USER" VERSION="1" LANGU="E" DESCRIPT="Reads Attribute DOC_USER" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="4" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_USER" SCONAME="RESULT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="4" EDITORDER="0 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZARCHIVE_DOCUSER"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="GET_DOC_USER" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="4" EDITORDER="0 "/>
   <source>method GET_DOC_USER.
***BUILD 090501
     &quot; returning RESULT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Get Attribute DOC_USER
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, result is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
************************************************************************

* * Inform class agent and handle exceptions
  state_read_access.

  result = DOC_USER.

           &quot; GET_DOC_USER
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CONTENT" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute DOC_CONTENT" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CONTENT" SCONAME="I_DOC_CONTENT" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCCONTENT"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CONTENT" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_DOC_CONTENT.
***BUILD 090501
     &quot; importing I_DOC_CONTENT
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute DOC_CONTENT
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_DOC_CONTENT &lt;&gt; DOC_CONTENT ).

    DOC_CONTENT = I_DOC_CONTENT.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_DOC_CONTENT &lt;&gt; DOC_CONTENT )

           &quot; GET_DOC_CONTENT
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CREATION_DATE" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute DOC_CREATION_DATE" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CREATION_DATE" SCONAME="I_DOC_CREATION_DATE" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCCREATIONDATE"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CREATION_DATE" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_DOC_CREATION_DATE.
***BUILD 090501
     &quot; importing I_DOC_CREATION_DATE
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute DOC_CREATION_DATE
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_DOC_CREATION_DATE &lt;&gt; DOC_CREATION_DATE ).

    DOC_CREATION_DATE = I_DOC_CREATION_DATE.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_DOC_CREATION_DATE &lt;&gt; DOC_CREATION_DATE )

           &quot; GET_DOC_CREATION_DATE
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CREATION_TIME" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute DOC_CREATION_TIME" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CREATION_TIME" SCONAME="I_DOC_CREATION_TIME" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCCREATIONTIME"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_CREATION_TIME" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_DOC_CREATION_TIME.
***BUILD 090501
     &quot; importing I_DOC_CREATION_TIME
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute DOC_CREATION_TIME
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_DOC_CREATION_TIME &lt;&gt; DOC_CREATION_TIME ).

    DOC_CREATION_TIME = I_DOC_CREATION_TIME.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_DOC_CREATION_TIME &lt;&gt; DOC_CREATION_TIME )

           &quot; GET_DOC_CREATION_TIME
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute DOC_FILENAME" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_FILENAME" SCONAME="I_DOC_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCFILENAME"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_FILENAME" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_DOC_FILENAME.
***BUILD 090501
     &quot; importing I_DOC_FILENAME
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute DOC_FILENAME
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_DOC_FILENAME &lt;&gt; DOC_FILENAME ).

    DOC_FILENAME = I_DOC_FILENAME.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_DOC_FILENAME &lt;&gt; DOC_FILENAME )

           &quot; GET_DOC_FILENAME
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_SIZE" VERSION="1" LANGU="E" DESCRIPT="Sets Attribute DOC_SIZE" EXPOSURE="2" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="5" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_SIZE" SCONAME="I_DOC_SIZE" VERSION="1" LANGU="E" DESCRIPT="Attribute Value" CMPTYPE="1" MTDTYPE="5" EDITORDER="0 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZARCHIVE_DOCSIZE"/>
   <exception CLSNAME="ZCL_P_ARCHIVE_CENTRAL" CMPNAME="SET_DOC_SIZE" SCONAME="CX_OS_OBJECT_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Object Services Exception" MTDTYPE="5" EDITORDER="0 "/>
   <source>method SET_DOC_SIZE.
***BUILD 090501
     &quot; importing I_DOC_SIZE
     &quot; raising CX_OS_OBJECT_NOT_FOUND
************************************************************************
* Purpose        : Set attribute DOC_SIZE
*
* Version        : 2.0
*
* Precondition   : -
*
* Postcondition  : The object state is loaded, attribute is set
*
* OO Exceptions  : CX_OS_OBJECT_NOT_FOUND
*
* Implementation : -
*
************************************************************************
* Changelog:
* - 2000-03-14   : (BGR) Version 2.0
* - 2000-07-28   : (SB)  OO Exceptions
* - 2000-10-04   : (SB)  Namespaces
************************************************************************

* * Inform class agent and handle exceptions
  state_write_access.

  if ( I_DOC_SIZE &lt;&gt; DOC_SIZE ).

    DOC_SIZE = I_DOC_SIZE.

*   * Inform class agent and handle exceptions
    state_changed.

  endif. &quot;( I_DOC_SIZE &lt;&gt; DOC_SIZE )

           &quot; GET_DOC_SIZE
endmethod.</source>
  </method>
 </CLAS>
 <DEVC DEVCLASS="ZARCHIVE" CTEXT="Simply archive your files in SAP NetWeaver App. Server" LANGUAGE="E" MASTERLANG="E" KORRFLAG="X" PDEVCLASS="ZGRU" DLVUNIT="HOME" NAMESPACE="/0CUST/" RESTRICTED="X" MAINPACK="X" CREATED_BY="IANNACCI" CREATED_ON="20121123" CHANGED_BY="IANNACCI" CHANGED_ON="20121123" PROJECT_GUID="00000000000000000000000000000000" TRANSLATION_DEPTH="NOT_CLASSIFIED" TRANSLATION_DEPTH_TEXT="Not Classified"/>
 <DEVC DEVCLASS="ZARCHIVE_DDIC" CTEXT="Dictionary Objects" LANGUAGE="E" MASTERLANG="E" KORRFLAG="X" PDEVCLASS="ZGRU" DLVUNIT="HOME" NAMESPACE="/0CUST/" PARENTCL="ZARCHIVE" CREATED_BY="IANNACCI" CREATED_ON="20121123" CHANGED_BY="IANNACCI" CHANGED_ON="20121123" PROJECT_GUID="00000000000000000000000000000000" TRANSLATION_DEPTH="NOT_CLASSIFIED" TRANSLATION_DEPTH_TEXT="Not Classified"/>
 <DEVC DEVCLASS="ZARCHIVE_BUSINESS_OBJECTS" CTEXT="Business Object Classes" LANGUAGE="E" MASTERLANG="E" KORRFLAG="X" PDEVCLASS="ZGRU" DLVUNIT="HOME" NAMESPACE="/0CUST/" PARENTCL="ZARCHIVE" CREATED_BY="IANNACCI" CREATED_ON="20121123" CHANGED_BY="IANNACCI" CHANGED_ON="20121123" PROJECT_GUID="00000000000000000000000000000000" TRANSLATION_DEPTH="NOT_CLASSIFIED" TRANSLATION_DEPTH_TEXT="Not Classified"/>
 <DEVC DEVCLASS="ZARCHIVE_DOCUMENTATION" CTEXT="Test Reports and documentation" LANGUAGE="E" MASTERLANG="E" KORRFLAG="X" PDEVCLASS="ZGRU" DLVUNIT="HOME" NAMESPACE="/0CUST/" PARENTCL="ZARCHIVE" CREATED_BY="IANNACCI" CREATED_ON="20121123" CHANGED_BY="IANNACCI" CHANGED_ON="20121123" PROJECT_GUID="00000000000000000000000000000000" TRANSLATION_DEPTH="NOT_CLASSIFIED" TRANSLATION_DEPTH_TEXT="Not Classified"/>
 <DOMA DOMNAME="ZARCHIVE_DOCCREATIONTIME" DDLANGUAGE="E" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASKLEN="0000" DDTEXT="Document creation time" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZARCHIVE_DOCCREATIONDATE" DDLANGUAGE="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASKLEN="0000" DDTEXT="Document creation date" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZARCHIVE_DOCUSER" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASKLEN="0000" DDTEXT="Document Username" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZARCHIVE_DOCSIZE" DDLANGUAGE="E" DATATYPE="INT4" LENG="000010" OUTPUTLEN="000011" DECIMALS="000000" MASKLEN="0000" DDTEXT="Document Size" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZARCHIVE_DOCCONTENT" DDLANGUAGE="E" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASKLEN="0000" DDTEXT="Document Content" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZARCHIVE_DOCFILENAME" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASKLEN="0000" DDTEXT="Document Filename" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DOMA DOMNAME="ZARCHIVE_DOCID" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASKLEN="0000" DDTEXT="Unique Document ID" AUTHCLASS="00" OUTPUTSTYLE="00"/>
 <DTEL ROLLNAME="ZARCHIVE_DOCSIZE" DDLANGUAGE="E" DOMNAME="ZARCHIVE_DOCSIZE" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Document Size" REPTEXT="Document Size" SCRTEXT_S="Size" SCRTEXT_M="Document Size" SCRTEXT_L="Document Size" AUTHCLASS="00" DTELMASTER="E" DATATYPE="INT4" LENG="000010" DECIMALS="000000" OUTPUTLEN="000011" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZARCHIVE_DOCCONTENT" DDLANGUAGE="E" DOMNAME="ZARCHIVE_DOCCONTENT" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DDTEXT="Document Content" REPTEXT="Document Content" SCRTEXT_S="Content" SCRTEXT_M="Document Content" SCRTEXT_L="Document Content" AUTHCLASS="00" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" DECIMALS="000000" OUTPUTLEN="000000" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZARCHIVE_DOCUSER" DDLANGUAGE="E" DOMNAME="ZARCHIVE_DOCUSER" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DDTEXT="Document Username" REPTEXT="Document Username" SCRTEXT_S="Username" SCRTEXT_M="Document Username" SCRTEXT_L="Document Username" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" DECIMALS="000000" OUTPUTLEN="000012" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZARCHIVE_DOCFILENAME" DDLANGUAGE="E" DOMNAME="ZARCHIVE_DOCFILENAME" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DDTEXT="Document Filename" REPTEXT="Document Filename" SCRTEXT_S="Filename" SCRTEXT_M="Document Filename" SCRTEXT_L="Document Filename" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" DECIMALS="000000" OUTPUTLEN="000060" LOWERCASE="X" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZARCHIVE_DOCCREATIONDATE" DDLANGUAGE="E" DOMNAME="ZARCHIVE_DOCCREATIONDATE" ROUTPUTLEN="000000" HEADLEN="22" SCRLEN1="10" SCRLEN2="15" SCRLEN3="22" DDTEXT="Document creation date" REPTEXT="Document creation date" SCRTEXT_S="Created" SCRTEXT_M="Creation date" SCRTEXT_L="Document creation date" AUTHCLASS="00" DTELMASTER="E" DATATYPE="DATS" LENG="000008" DECIMALS="000000" OUTPUTLEN="000010" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZARCHIVE_DOCCREATIONTIME" DDLANGUAGE="E" DOMNAME="ZARCHIVE_DOCCREATIONTIME" ROUTPUTLEN="000000" HEADLEN="22" SCRLEN1="10" SCRLEN2="15" SCRLEN3="22" DDTEXT="Document creation time" REPTEXT="Document creation time" SCRTEXT_S="At" SCRTEXT_M="Creation time" SCRTEXT_L="Document creation time" AUTHCLASS="00" DTELMASTER="E" DATATYPE="TIMS" LENG="000006" DECIMALS="000000" OUTPUTLEN="000008" REFKIND="D">
  <tpara/>
 </DTEL>
 <DTEL ROLLNAME="ZARCHIVE_DOCID" DDLANGUAGE="E" DOMNAME="ZARCHIVE_DOCID" ROUTPUTLEN="000000" HEADLEN="18" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Unique Document ID" REPTEXT="Unique Document ID" SCRTEXT_S="Doc. ID" SCRTEXT_M="Document ID" SCRTEXT_L="Unique Document ID" AUTHCLASS="00" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" DECIMALS="000000" OUTPUTLEN="000030" REFKIND="D">
  <tpara/>
 </DTEL>
 <ENQU VIEWNAME="EZARCH_CENTRAL" AS4LOCAL="A" AS4VERS="0000" DDLANGUAGE="E" AGGTYPE="E" AUTHCLASS="00" ROOTTAB="ZARCHIVE_CENTRAL" DDTEXT="ZARCHIVE_CENTRAL Lock Object">
  <dd26e VIEWNAME="EZARCH_CENTRAL" TABNAME="ZARCHIVE_CENTRAL" TABPOS="0001" FORTABNAME="ZARCHIVE_CENTRAL" ENQMODE="E"/>
  <dd27p VIEWNAME="EZARCH_CENTRAL" OBJPOS="0001" DDLANGUAGE="E" VIEWFIELD="MANDT" TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="MANDT" KEYFLAG="X" ENQMODE="E" DATATYPE="CLNT" FLENGTH="000003" INTTYPE="C" INTLEN="000006" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" OUTPUTLEN="000000" DECIMALS="000000"/>
  <dd27p VIEWNAME="EZARCH_CENTRAL" OBJPOS="0002" DDLANGUAGE="E" VIEWFIELD="DOC_ID" TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_ID" KEYFLAG="X" ROLLNAME="ZARCHIVE_DOCID" ROLLNAMEVI="ZARCHIVE_DOCID" ENQMODE="E" DOMNAME="ZARCHIVE_DOCID" DATATYPE="CHAR" FLENGTH="000030" INTTYPE="C" INTLEN="000060" HEADLEN="18" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" OUTPUTLEN="000030" DECIMALS="000000" DDTEXT="Unique Document ID" REPTEXT="Unique Document ID" SCRTEXT_S="Doc. ID" SCRTEXT_M="Document ID" SCRTEXT_L="Unique Document ID"/>
  <dd27p VIEWNAME="EZARCH_CENTRAL" OBJPOS="0003" DDLANGUAGE="E" VIEWFIELD="DOC_USER" TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_USER" KEYFLAG="X" ROLLNAME="ZARCHIVE_DOCUSER" ROLLNAMEVI="ZARCHIVE_DOCUSER" ENQMODE="E" DOMNAME="ZARCHIVE_DOCUSER" DATATYPE="CHAR" FLENGTH="000012" INTTYPE="C" INTLEN="000024" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" OUTPUTLEN="000012" DECIMALS="000000" DDTEXT="Document Username" REPTEXT="Document Username" SCRTEXT_S="Username" SCRTEXT_M="Document Username" SCRTEXT_L="Document Username"/>
  <ddena VIEWNAME="EZARCH_CENTRAL" TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="MANDT" VIEWFIELD="MANDT"/>
  <ddena VIEWNAME="EZARCH_CENTRAL" TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_ID" VIEWFIELD="DOC_ID"/>
  <ddena VIEWNAME="EZARCH_CENTRAL" TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_USER" VIEWFIELD="DOC_USER"/>
 </ENQU>
 <PROG NAME="ZARCHIVE_INS_TEST" VARCL="X" SUBC="1" RMAND="100" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZARCHIVE_INS_TEST" LENGTH="25 "/>
    <textElement ID="S" KEY="P_FLNAME" ENTRY="        File to upload" LENGTH="22 "/>
    <textElement ID="S" KEY="P_ID" ENTRY="        Internal Doc. ID (Unique)" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZARCHIVE_INS_TEST
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zarchive_ins_test.

DATA lv_retfiletable  TYPE filetable.
DATA lv_retrc         TYPE sysubrc.
DATA lv_retuseraction TYPE i.
DATA lv_filename      TYPE string.
DATA lv_length        TYPE i.
DATA lt_import        TYPE STANDARD TABLE OF x255.

&quot;--- Required parameters are filename and internal document ID that you can generate as you want
PARAMETERS p_flname(300) TYPE c.
PARAMETERS p_id(30)      TYPE c.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_flname.
  CALL METHOD cl_gui_frontend_services=&gt;file_open_dialog
    EXPORTING
      multiselection    = abap_false
      file_filter       = &apos;*.txt&apos;
      default_extension = &apos;txt&apos;
    CHANGING
      file_table        = lv_retfiletable
      rc                = lv_retrc
      user_action       = lv_retuseraction.
  READ TABLE lv_retfiletable INTO p_flname INDEX 1.

INITIALIZATION.

START-OF-SELECTION.

  MOVE p_flname TO lv_filename.
  CALL METHOD cl_gui_frontend_services=&gt;gui_upload
    EXPORTING
      filename                = lv_filename
      filetype                = &apos;BIN&apos;
*      has_field_separator     = abap_true
    IMPORTING
      filelength              = lv_length
    CHANGING
      data_tab                = lt_import
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      not_supported_by_gui    = 17
      error_no_gui            = 18
      OTHERS                  = 19.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.

  CHECK lt_import IS NOT INITIAL.
  CHECK p_id IS NOT INITIAL.

  DATA lv_string TYPE xstring.

  CALL FUNCTION &apos;SCMS_BINARY_TO_XSTRING&apos;
    EXPORTING
      input_length = lv_length
    IMPORTING
      buffer       = lv_string
    TABLES
      binary_tab   = lt_import
    EXCEPTIONS
      failed       = 1
      OTHERS       = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.

  TYPES t_file(60) TYPE c.
  DATA lv_file TYPE t_file.
  DATA lt_name TYPE STANDARD TABLE OF t_file.
  DATA lin TYPE i.
  SPLIT lv_filename AT &apos;\&apos; INTO TABLE lt_name.
  DESCRIBE TABLE lt_name LINES lin.
  READ TABLE lt_name INTO lv_file INDEX lin.

  DATA exp_ex TYPE REF TO cx_os_object_existing.
  DATA exp_ir TYPE REF TO cx_parameter_invalid_range.
  DATA exp_bo TYPE REF TO cx_sy_buffer_overflow.

  &quot;Lock logically the object (another user could be creating an object with the same ID)
  CALL FUNCTION &apos;ENQUEUE_EZARCH_CENTRAL&apos;
    EXPORTING
      mode_zarchive_central = &apos;E&apos;
      mandt                 = sy-mandt
      doc_id                = p_id
      doc_user              = sy-uname
      x_doc_id              = &apos; &apos;
      x_doc_user            = &apos; &apos;
      _scope                = &apos;2&apos;
      _wait                 = &apos; &apos;
      _collect              = &apos; &apos;
    EXCEPTIONS
      foreign_lock          = 1
      system_failure        = 2
      OTHERS                = 3.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.


  TRY.
      CALL METHOD zcl_b_archive_central=&gt;create_document
        EXPORTING
          i_doc_id       = p_id
          i_doc_filename = lv_file
          i_doc_size     = lv_length
          i_doc_content  = lv_string.
    CATCH cx_os_object_existing INTO exp_ex.
      MESSAGE exp_ex TYPE &apos;E&apos;.
    CATCH cx_parameter_invalid_range INTO exp_ir.
      MESSAGE exp_ir TYPE &apos;E&apos;.
    CATCH cx_sy_buffer_overflow INTO exp_bo.
      MESSAGE exp_bo TYPE &apos;E&apos;.
  ENDTRY.

  COMMIT WORK AND WAIT.</source>
 </PROG>
 <PROG NAME="ZARCHIVE_GET_TEST" VARCL="X" SUBC="1" RMAND="100" RLOAD="E" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="R" ENTRY="Include ZARCHIVE_INS_TEST" LENGTH="25 "/>
    <textElement ID="S" KEY="P_FLNAME" ENTRY="        File to upload" LENGTH="22 "/>
    <textElement ID="S" KEY="P_ID" ENTRY="        Internal Doc. ID (Unique)" LENGTH="33 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  ZARCHIVE_GET_TEST
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT zarchive_get_test.

DATA lv_length        TYPE i.
DATA lt_import        TYPE STANDARD TABLE OF x255.

&quot;--- Required parameter is the internal document ID
PARAMETERS p_id      TYPE zarchive_central-doc_id.

INITIALIZATION.

START-OF-SELECTION.

  CHECK p_id IS NOT INITIAL.

  DATA exp_nf TYPE REF TO cx_os_object_not_found.
  DATA exp_ir TYPE REF TO cx_parameter_invalid_range.
  DATA exp_bo TYPE REF TO cx_sy_buffer_overflow.

  DATA lv_content TYPE zarchive_doccontent.
  DATA lv_size TYPE zarchive_docsize.
  DATA lv_filename TYPE zarchive_docfilename.

  TRY.
      CALL METHOD zcl_b_archive_central=&gt;read_document
        EXPORTING
          i_doc_id       = p_id
        IMPORTING
          e_doc_content  = lv_content
          e_doc_size     = lv_size
          e_doc_filename = lv_filename.
    CATCH cx_os_object_not_found INTO exp_nf.
      MESSAGE exp_nf TYPE &apos;E&apos;.
    CATCH cx_parameter_invalid_range INTO exp_ir.
      MESSAGE exp_ir TYPE &apos;E&apos;.
    CATCH cx_sy_buffer_overflow INTO exp_bo.
      MESSAGE exp_bo TYPE &apos;E&apos;.
  ENDTRY.

  &quot; Get file extension
  DATA lv_ext(3) TYPE c.
  DATA lv_name(56) TYPE c.
  DATA lv_pos TYPE i.
  DATA lv_exts TYPE string.

  lv_pos = strlen( lv_filename ) - 3.

  CALL FUNCTION &apos;STRING_SPLIT_AT_POSITION&apos;
    EXPORTING
      string            = lv_filename
      pos               = lv_pos
    IMPORTING
      string1           = lv_name
      string2           = lv_ext
    EXCEPTIONS
      string1_too_small = 1
      string2_too_small = 2
      pos_not_valid     = 3
      OTHERS            = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.

  MOVE lv_ext TO lv_exts.
  lv_pos = strlen( lv_name ) - 1.

  DATA: ld_filename TYPE string,
        ld_path     TYPE string,
        ld_fullpath TYPE string,
        ld_result   TYPE i.

  MOVE lv_name(lv_pos) TO ld_filename.

* Display save dialog window
  CALL METHOD cl_gui_frontend_services=&gt;file_save_dialog
    EXPORTING
*     window_title      = &apos; &apos;
      default_extension = lv_exts
      default_file_name = ld_filename
      initial_directory = &apos;c:\temp\&apos;
    CHANGING
      filename          = ld_filename
      path              = ld_path
      fullpath          = ld_fullpath
      user_action       = ld_result.

* Check user did not cancel request
  CHECK ld_result EQ &apos;0&apos;.

  DATA lt_tab TYPE STANDARD TABLE OF x255.

  CALL FUNCTION &apos;SCMS_XSTRING_TO_BINARY&apos;
    EXPORTING
      buffer        = lv_content
    IMPORTING
      output_length = lv_length
    TABLES
      binary_tab    = lt_tab.


  cl_gui_frontend_services=&gt;gui_download( EXPORTING     filename     = ld_fullpath
                                                        filetype     = &apos;BIN&apos;
                                          CHANGING      data_tab     = lt_tab ).
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.</source>
 </PROG>
 <TABL TABNAME="ZARCHIVE_CENTRAL" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="Central archive table" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZARCHIVE_CENTRAL" AS4LOCAL="A" AS4VERS="0000" TABKAT="1" TABART="APPL0" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ADMINFIELD="0" INTTYPE="C" INTLEN="000006" NOTNULL="X" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000000" DECIMALS="000000" MASK="  CLNT" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_ID" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="ZARCHIVE_DOCID" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" NOTNULL="X" DOMNAME="ZARCHIVE_DOCID" ROUTPUTLEN="000000" HEADLEN="18" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Unique Document ID" REPTEXT="Unique Document ID" SCRTEXT_S="Doc. ID" SCRTEXT_M="Document ID" SCRTEXT_L="Unique Document ID" DOMNAME3L="ZARCHIVE_DOCID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_USER" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZARCHIVE_DOCUSER" ADMINFIELD="0" INTTYPE="C" INTLEN="000024" NOTNULL="X" DOMNAME="ZARCHIVE_DOCUSER" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Document Username" REPTEXT="Document Username" SCRTEXT_S="Username" SCRTEXT_M="Document Username" SCRTEXT_L="Document Username" DOMNAME3L="ZARCHIVE_DOCUSER" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_FILENAME" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZARCHIVE_DOCFILENAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" DOMNAME="ZARCHIVE_DOCFILENAME" ROUTPUTLEN="000000" HEADLEN="17" SCRLEN1="10" SCRLEN2="17" SCRLEN3="20" DTELMASTER="E" DATATYPE="CHAR" LENG="000060" OUTPUTLEN="000060" DECIMALS="000000" LOWERCASE="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Document Filename" REPTEXT="Document Filename" SCRTEXT_S="Filename" SCRTEXT_M="Document Filename" SCRTEXT_L="Document Filename" DOMNAME3L="ZARCHIVE_DOCFILENAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_CONTENT" DDLANGUAGE="E" POSITION="0005" ROLLNAME="ZARCHIVE_DOCCONTENT" ADMINFIELD="0" INTTYPE="y" INTLEN="000008" DOMNAME="ZARCHIVE_DOCCONTENT" ROUTPUTLEN="000000" HEADLEN="16" SCRLEN1="10" SCRLEN2="16" SCRLEN3="20" DTELMASTER="E" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  RSTRE" MASKLEN="0000" DDTEXT="Document Content" REPTEXT="Document Content" SCRTEXT_S="Content" SCRTEXT_M="Document Content" SCRTEXT_L="Document Content" DOMNAME3L="ZARCHIVE_DOCCONTENT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_SIZE" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZARCHIVE_DOCSIZE" ADMINFIELD="0" INTTYPE="X" INTLEN="000004" DOMNAME="ZARCHIVE_DOCSIZE" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="INT4" LENG="000010" OUTPUTLEN="000011" DECIMALS="000000" MASK="  INT4E" MASKLEN="0000" DDTEXT="Document Size" REPTEXT="Document Size" SCRTEXT_S="Size" SCRTEXT_M="Document Size" SCRTEXT_L="Document Size" DOMNAME3L="ZARCHIVE_DOCSIZE" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_CREATION_DATE" DDLANGUAGE="E" POSITION="0007" ROLLNAME="ZARCHIVE_DOCCREATIONDATE" ADMINFIELD="0" INTTYPE="D" INTLEN="000016" DOMNAME="ZARCHIVE_DOCCREATIONDATE" ROUTPUTLEN="000000" HEADLEN="22" SCRLEN1="10" SCRLEN2="15" SCRLEN3="22" DTELMASTER="E" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Document creation date" REPTEXT="Document creation date" SCRTEXT_S="Created" SCRTEXT_M="Creation date" SCRTEXT_L="Document creation date" DOMNAME3L="ZARCHIVE_DOCCREATIONDATE" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZARCHIVE_CENTRAL" FIELDNAME="DOC_CREATION_TIME" DDLANGUAGE="E" POSITION="0008" ROLLNAME="ZARCHIVE_DOCCREATIONTIME" ADMINFIELD="0" INTTYPE="T" INTLEN="000012" DOMNAME="ZARCHIVE_DOCCREATIONTIME" ROUTPUTLEN="000000" HEADLEN="22" SCRLEN1="10" SCRLEN2="15" SCRLEN3="22" DTELMASTER="E" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Document creation time" REPTEXT="Document creation time" SCRTEXT_S="At" SCRTEXT_M="Creation time" SCRTEXT_L="Document creation time" DOMNAME3L="ZARCHIVE_DOCCREATIONTIME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
</nugget>
